{"version":3,"file":"static/js/861.2717b632.chunk.js","mappings":"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","sources":["components/nestedcomponents/conversations.js","components/nestedcomponents/chatabyss.js","components/nestedcomponents/onlinechatters.js","components/messenger.js","components/modals/loadingmodal.js","components/modals/yesnomodal.js","components/shimmer.js"],"sourcesContent":["import \"../../corecss/conversation.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { yoursets } from '../../features/you'\r\nimport { useDispatch } from 'react-redux';\r\nimport Shimmer from '.././shimmer.js';\r\n\r\nconst Conversation = ({ conver, latestchat, setFromconv, fromconv }) => {\r\n\r\n\r\n    let curuser = useSelector((state) => { return state.youryr.value });\r\n    let theme = useSelector((state) => { return state.themeyr.value });\r\n\r\n\r\n    let [fre, setFre] = useState(\"\");\r\n    let [isnow, setIsnow] = useState(false);\r\n    let [newunblocks, setNewunblocks] = useState([]);\r\n\r\n    let disp = useDispatch();\r\n\r\n     let url = \"http://localhost:3001\";\r\n     //let url = \"https://social-media-app-backend-final.onrender.com\";\r\n\r\n    useEffect(() => {\r\n\r\n        let friendid = conver.members?.find((fren) => fren !== curuser.userid);\r\n\r\n        fetch(`${url}/messenger/getconvostuff/${friendid}`, {\r\n            credentials: 'include'\r\n        }).then((res) => {\r\n            return res.json();\r\n        }).then((data) => {\r\n            setFre(data);\r\n            setIsnow(c => true);\r\n            setFromconv((fromconv) => ({ ...fromconv, [conver._id]: data }));\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n\r\n    }, [curuser, conver, setFromconv]);\r\n\r\n    const unblock = () => {\r\n\r\n        async function unblocked() {\r\n\r\n            setNewunblocks([...newunblocks, fre.username]);\r\n\r\n            await fetch(`${url}/users/unblock/${curuser.usrn}`, {\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: { 'Content-Type': \"application/json\" },\r\n                body: JSON.stringify({ username: fre.username }),\r\n            })\r\n\r\n\r\n            fromconv[conver._id].unblockattempt = true;\r\n            setFromconv((fromconv) => ({ ...fromconv }));\r\n\r\n            const newblocked = curuser.blocked.filter((each) => each != fre.username);\r\n\r\n            const newobj = {\r\n                pfp: curuser.pfp,\r\n                usrn: curuser.usrn,\r\n                email: curuser.email,\r\n                fullname: curuser.fullname,\r\n                userid: curuser.userid,\r\n                following: curuser.following,\r\n                blocked: newblocked\r\n            };\r\n\r\n\r\n            disp(yoursets(newobj));\r\n\r\n        }\r\n\r\n        unblocked();\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={newunblocks.includes(fre.username) ? latestchat[conver._id] ? \"convonewer\" : theme ? \"convo\" : \"convonight\" : fre?.blocked?.includes(curuser.usrn) ? \"convotheyblocked\" : curuser.blocked.includes(fre.username) ? 'convoyoublocked' : latestchat[conver._id] ? \"convonewer\" : theme ? \"convo\" : \"convonight\"}>\r\n\r\n            {\r\n\r\n                isnow\r\n\r\n                    ?\r\n\r\n                    <>\r\n\r\n                        <img className=\"convoimg\" alt=\" \" src={fre.pfp} />\r\n                        <span className={theme ? \"convoname\" : \"convoname convonamenightmode\"}>{fre.fname}</span>\r\n\r\n                    </>\r\n\r\n                    :\r\n\r\n                    <>\r\n\r\n                        <div className=\"chatpfpskeleton\">\r\n                            <Shimmer></Shimmer>\r\n                        </div>\r\n\r\n                        <div className=\"chatfnameskeleton\">\r\n                            <Shimmer></Shimmer>\r\n                        </div>\r\n\r\n                    </>\r\n\r\n\r\n\r\n            }\r\n\r\n            {!newunblocks.includes(fre.username) && curuser.blocked.includes(fre.username) && <button className=\"unblocker\" onClick={unblock}>UNBLOCK</button>}\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Conversation;\r\n\r\n\r\n\r\n\r\n","\r\nimport \"../../corecss/chatabyss.css\";\r\nimport { format } from 'timeago.js';\r\nimport { useState, useEffect } from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport Shimmer from \"../shimmer\";\r\n\r\n\r\nconst Chatabyss = ({ onechat, own, ident, status, id, rec, pfpobj, finalseen, messages, setMessages, Currentchat, socket, setShddel, setTextdets, redisplaylane, setRedisplaylane, redselector, setRedselector, setNodel, goback, setGoback, groupdeletion, groupie, safeinherit, setMultiplelast, sempahore }) => {\r\n\r\n    let [clicked, setClicked] = useState({});\r\n    let [displaylane, setDisplaylane] = useState(null);\r\n    let [noaccess, setNoaccess] = useState({});\r\n\r\n    let curuser = useSelector((state) => { return state.youryr.value });\r\n    let theme = useSelector((state) => { return state.themeyr.value });\r\n\r\n    let bubbler = (id) => {\r\n\r\n        setTimeout(() => {\r\n            setClicked((prev) => ({ ...prev, [id]: true }));\r\n            setNoaccess((prev) => ({ ...prev, [id]: true }));\r\n        }, 1);\r\n\r\n    }\r\n\r\n     let url = \"http://localhost:3001\";\r\n     //let url = \"https://social-media-app-backend-final.onrender.com\";\r\n\r\n    let redzone = (id) => {\r\n\r\n        setRedselector((prev) => {\r\n\r\n            if (Object.keys(prev).includes(id)) {\r\n                prev[id] = !prev[id];\r\n                return { ...prev };\r\n            } else {\r\n                return { ...prev, [id]: true };\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    let del = (text) => {\r\n\r\n\r\n        if (text.length == 1) {\r\n\r\n\r\n            let isLast = false;\r\n            if (text[0]._id === messages[messages.length - 1]._id) {\r\n                isLast = true;\r\n            }\r\n\r\n            fetch(`${url}/messenger/delete/${text[0]._id}`, {\r\n                method: 'DELETE',\r\n                credentials: 'include'\r\n            }).then((res) => {\r\n                return res.json();\r\n            }).then((data) => {\r\n\r\n                fetch(`${url}/messenger/ex/${Currentchat._id}`, {\r\n                    credentials: 'include'\r\n                }).then((res) => {\r\n                    return res.json();\r\n                }).then((data) => {\r\n\r\n                    let holtexts = data.filter((each) => each.holders.includes(curuser.userid));\r\n                    setMessages(holtexts);\r\n                    setShddel(true);\r\n                    setTextdets({ msg: text[0], last: isLast });\r\n\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                });\r\n\r\n                const receiverid = Currentchat.members.find((elem) => elem !== curuser.userid);\r\n\r\n                socket.current.emit('clienttextdel', {\r\n                    receiverid,\r\n                    convid: Currentchat._id\r\n                });\r\n\r\n\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n\r\n\r\n\r\n\r\n        } else {\r\n\r\n\r\n            safeinherit.current = { ...safeinherit.current, [text._id]: [true, messages.indexOf(text)] };\r\n\r\n            let isLast = false;\r\n\r\n            if (text._id === messages[messages.length - 1]._id) {\r\n\r\n                isLast = true;\r\n\r\n            }\r\n\r\n            fetch(`${url}/messenger/delete/${text._id}`, {\r\n                method: 'DELETE',\r\n                credentials: 'include'\r\n            }).then((res) => {\r\n                return res.json();\r\n            }).then((data) => {\r\n\r\n                fetch(`${url}/messenger/ex/${Currentchat._id}`, {\r\n                    credentials: 'include'\r\n                }).then((res) => {\r\n                    return res.json();\r\n                }).then((data) => {\r\n\r\n                    let holtexts = data.filter((each) => each.holders.includes(curuser.userid));\r\n\r\n                    setMessages(holtexts);\r\n                    setShddel(true);\r\n                    setTextdets({ msg: text, last: isLast });\r\n\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                });\r\n\r\n                const receiverid = Currentchat.members.find((elem) => elem !== curuser.userid);\r\n\r\n                socket.current.emit('clienttextdel', {\r\n                    receiverid,\r\n                    convid: Currentchat._id\r\n                });\r\n\r\n\r\n\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n\r\n    let copytoclipboard = (copiedtext) => {\r\n        navigator.clipboard.writeText(copiedtext);\r\n        setDisplaylane(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const id = setTimeout(() => {\r\n            setDisplaylane(null);\r\n        }, 3000);\r\n\r\n        return () => {\r\n            clearTimeout(id)\r\n        }\r\n\r\n    }, [displaylane]);\r\n\r\n    let cel = () => {\r\n\r\n    }\r\n\r\n    let selection = (text) => {\r\n\r\n        setNoaccess({});\r\n        setRedisplaylane(true);\r\n        setRedselector((prev) => ({ ...prev, [text._id]: true }));\r\n        setNodel(true);\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (goback) {\r\n\r\n            setGoback(false);\r\n            setNodel(false);\r\n            setRedisplaylane(null);\r\n            setRedselector({});\r\n        }\r\n\r\n    }, [goback]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (groupdeletion && groupie) {\r\n\r\n            let redarray = Object.keys(redselector);\r\n\r\n            for (let i = 0; i < redarray.length; i++) {\r\n                safeinherit.current = { ...safeinherit.current, [redarray[i]]: [true, messages.indexOf(messages.find((each) => each._id === redarray[i]))] };\r\n            }\r\n\r\n            if (redselector[messages[messages.length - 1]._id]) {\r\n                setMultiplelast(true);\r\n            }\r\n\r\n            del([onechat]);\r\n\r\n        }\r\n\r\n    }, [groupdeletion]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        let functionc = (e) => {\r\n            if (!e.target.matches('.textoptions')) {\r\n                setClicked({});\r\n            }\r\n        }\r\n\r\n        document.addEventListener('click', functionc);\r\n\r\n        return () => {\r\n            document.removeEventListener('click', functionc);\r\n        }\r\n\r\n\r\n    });\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n        <>\r\n\r\n            {onechat._id ?\r\n\r\n                <>\r\n\r\n                    <div className={own ? redselector[id] ? \"reddisplay textabyss own\" : displaylane ? \"greendisplay textabyss own\" : \"textabyss own\" : \"textabyss\"} >\r\n                        <div className=\"textabyssupper\">\r\n\r\n                            {\r\n                                sempahore\r\n\r\n                                    ?\r\n\r\n                                    !own && pfpobj[id] && <img className=\"abysspfp\" alt=\"\" src={ident != null ? ident.pfp : ' '}></img>\r\n\r\n                                    :\r\n\r\n                                    !own && pfpobj[id] && <div className=\"abysspfpskeleton\"> <Shimmer></Shimmer></div>\r\n\r\n                            }\r\n\r\n                            <p className={onechat.thetext.length < 300 ? `themessager` : `thelongmessager`} onClick={own ? redisplaylane ? () => { redzone(id) } : () => { bubbler(id) } : console.log(\" \")}>{onechat.thetext}</p>\r\n                            {noaccess[id] && own && clicked[id] && <div className=\"textoptions right\">\r\n                                <div>\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fillRule=\"currentColor\" className=\"bi bi-trash3 delete\" onClick={() => { del(onechat) }} viewBox=\"0 0 16 16\">\r\n                                        <path d=\"M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5ZM11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0H11Zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5h9.916Zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5Z\" />\r\n                                    </svg>\r\n                                </div>\r\n                                <div>\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fillRule=\"currentColor\" className=\"bi bi-files copy\" onClick={() => { copytoclipboard(onechat.thetext) }} viewBox=\"0 0 16 16\">\r\n                                        <path d=\"M13 0H6a2 2 0 0 0-2 2 2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2 2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm0 13V4a2 2 0 0 0-2-2H5a1 1 0 0 1 1-1h7a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1zM3 4a1 1 0 0 1 1-1h7a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V4z\" />\r\n                                    </svg>\r\n                                </div>\r\n                                <div>\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fillRule=\"currentColor\" className=\"bi bi-check-square select\" onClick={() => { selection(onechat) }} viewBox=\"0 0 16 16\">\r\n                                        <path d=\"M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\" />\r\n                                        <path d=\"M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.235.235 0 0 1 .02-.022z\" />\r\n                                    </svg>\r\n                                </div>\r\n                                <div>\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fillRule=\"currentColor\" className=\"bi bi-x cancel\" onClick={cel} viewBox=\"0 0 16 16\">\r\n                                        <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\" />\r\n                                    </svg>\r\n                                </div>\r\n                            </div>}\r\n                            {displaylane && <p className=\"status\">TEXT COPIED </p>}\r\n                            {redselector[id] && redisplaylane && <p className=\"statusred\">TEXT SELECTED </p>}\r\n                            <p className={redselector[id] ? \"redstamp\" : theme ? \"timestamp\" : \"timestamp timenight\"}>{/^((?!seconds).)*$/.test(format(onechat?.createdAt)) ? format(onechat?.createdAt) : 'just now'}</p>\r\n                        </div>\r\n\r\n                        {(Object.keys(finalseen).length === 0 ? (status && id === rec && own) : (finalseen[id] && status && id === rec && own)) &&\r\n                            <div className=\"textabysslower\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"20\" fill=\"currentColor\" className=\"bi bi-eye\" viewBox=\"0 0 16 16\">\r\n                                    <path d=\"M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z\" />\r\n                                    <path d=\"M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z\" />\r\n                                </svg>\r\n                            </div>}\r\n\r\n\r\n                    </div>\r\n\r\n\r\n                </>\r\n\r\n                :\r\n\r\n                <>\r\n\r\n                    <div className={own ? redselector[id] ? \"reddisplay textabyss own invisibility\" : displaylane ? \"greendisplay textabyss own invisibility\" : \"textabyss own invisibility\" : \"textabyss invisibility\"} >\r\n                        <div className=\"textabyssupper invisibility\">\r\n                            {!own && pfpobj[id] && <img className=\"abysspfp\" alt=\"\" src={ident != null ? ident.pfp : ' '}></img>}\r\n\r\n\r\n                            <p className={onechat.thetext.length < 300 ? `themessage` : `thelongmessage`} onClick={own ? redisplaylane ? () => { redzone(id) } : () => { bubbler(id) } : console.log(\" \")}>{onechat.thetext}</p>\r\n                            {noaccess[id] && own && clicked[id] && <div className=\"textoptions right\">\r\n                                <div>\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fillRule=\"currentColor\" className=\"bi bi-trash3 delete\" onClick={() => { del(onechat) }} viewBox=\"0 0 16 16\">\r\n                                        <path d=\"M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5ZM11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0H11Zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5h9.916Zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5Z\" />\r\n                                    </svg>\r\n                                </div>\r\n                                <div>\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fillRule=\"currentColor\" className=\"bi bi-files copy\" onClick={() => { copytoclipboard(onechat.thetext) }} viewBox=\"0 0 16 16\">\r\n                                        <path d=\"M13 0H6a2 2 0 0 0-2 2 2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2 2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm0 13V4a2 2 0 0 0-2-2H5a1 1 0 0 1 1-1h7a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1zM3 4a1 1 0 0 1 1-1h7a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V4z\" />\r\n                                    </svg>\r\n                                </div>\r\n                                <div>\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fillRule=\"currentColor\" className=\"bi bi-check-square select\" onClick={() => { selection(onechat) }} viewBox=\"0 0 16 16\">\r\n                                        <path d=\"M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\" />\r\n                                        <path d=\"M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.235.235 0 0 1 .02-.022z\" />\r\n                                    </svg>\r\n                                </div>\r\n                                <div>\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fillRule=\"currentColor\" className=\"bi bi-x cancel\" onClick={cel} viewBox=\"0 0 16 16\">\r\n                                        <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\" />\r\n                                    </svg>\r\n                                </div>\r\n                            </div>}\r\n                            {displaylane && <p className=\"status\">TEXT COPIED </p>}\r\n                            {redselector[id] && redisplaylane && <p className=\"statusred\">TEXT SELECTED </p>}\r\n                            <p className={redselector[id] ? \"redstamp\" : \"timestamp\"}>{/^((?!seconds).)*$/.test(format(onechat?.createdAt)) ? format(onechat?.createdAt) : 'just now'}</p>\r\n                        </div>\r\n\r\n                        {(Object.keys(finalseen).length === 0 ? (status && id === rec && own) : (finalseen[id] && status && id === rec && own)) &&\r\n                            <div className=\"textabysslower invisibility\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"20\" fill=\"currentColor\" className=\"bi bi-eye\" viewBox=\"0 0 16 16\">\r\n                                    <path d=\"M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z\" />\r\n                                    <path d=\"M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z\" />\r\n                                </svg>\r\n                            </div>}\r\n\r\n\r\n                    </div>\r\n\r\n\r\n                </>\r\n\r\n\r\n\r\n            }\r\n\r\n        </>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Chatabyss;\r\n\r\n\r\n\r\n\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"../../corecss/onlinechatters.css\";\r\nimport Yesnomodal from \"../modals/yesnomodal\";\r\n\r\nconst Onlinechatters = ({ onl, setCurrentchat, Currentchat, setDraft, draft, outsider, setOutsider, semaphore, setOnlchatclicked, onlchatclicked }) => {\r\n\r\n\r\n  let [friends, setFriends] = useState([]);\r\n  let [onlfriends, setOnlFriends] = useState([]);\r\n  let [isnow, setIsnow] = useState(false);\r\n  let [startconv, setStartconv] = useState({});\r\n  let [classadder, setClassadder] = useState(true);\r\n\r\n  let curuser = useSelector((state) => { return state.youryr.value });\r\n  let theme = useSelector((state) => { return state.themeyr.value });\r\n\r\n  let selref = useRef(false);\r\n\r\n  let url = \"http://localhost:3001\";\r\n  //let url = \"https://social-media-app-backend-final.onrender.com\";\r\n\r\n  useEffect(() => {\r\n\r\n    fetch(`${url}/messenger/getfren/${curuser.userid}`, {\r\n      credentials: 'include'\r\n    }).then((res) => {\r\n      return res.json();\r\n    }).then((data) => {\r\n\r\n      setFriends(data);\r\n      setIsnow(c => true);\r\n    }).catch((err) => {\r\n      console.log(err);\r\n    });\r\n\r\n  }, [curuser, onl]);\r\n\r\n\r\n  useEffect(() => {\r\n    setOnlFriends(friends.filter((each) => onl.includes(each._id)));\r\n  }, [friends, onl]);\r\n\r\n\r\n  if (outsider.verdict) {\r\n\r\n    setOutsider(false);\r\n\r\n    let checkifconvo = [curuser.userid, outsider.data];\r\n\r\n    fetch(`${url}/messenger/alreadyconv/checker`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': \"application/json\" },\r\n      body: JSON.stringify(checkifconvo),\r\n      credentials: 'include'\r\n    }).then((res) => {\r\n      return res.json();\r\n    }).then((data) => {\r\n      if (data != null) {\r\n\r\n        setCurrentchat(data);\r\n      }\r\n      else {\r\n\r\n        let newobj = {\r\n          senderId: curuser.userid,\r\n          receiverId: outsider.data\r\n        };\r\n\r\n        fetch(`${url}/messenger/create`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': \"application/json\" },\r\n          body: JSON.stringify(newobj),\r\n          credentials: 'include'\r\n        }).then((res) => {\r\n          return res.json();\r\n        }).then((datae) => {\r\n\r\n          setCurrentchat(datae);\r\n\r\n          setDraft(datae);\r\n\r\n          fetch(`${url}/messenger/delconv/${datae._id}`, {\r\n            method: 'DELETE',\r\n            credentials: 'include'\r\n          }).then((res) => {\r\n            return res.json();\r\n          }).then((data) => {\r\n\r\n          }).catch((err) => {\r\n            console.log(err);\r\n          });\r\n\r\n        }).catch((err) => {\r\n          console.log(err);\r\n        });\r\n\r\n      }\r\n    }).catch((err) => {\r\n      console.log(err);\r\n    });\r\n\r\n  }\r\n\r\n\r\n  let handleclicker = (o) => {\r\n\r\n    let checker = null;\r\n    if (draft?.members[0] != curuser.userid) {\r\n      checker = draft?.members[0];\r\n    }\r\n    else {\r\n      checker = draft?.members[1];\r\n    }\r\n\r\n\r\n    if (!(o._id == checker) || (Currentchat != draft)) {\r\n\r\n      let checkifconvo = [curuser.userid, o._id];\r\n\r\n      fetch(`${url}/messenger/alreadyconv/checker`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': \"application/json\" },\r\n        body: JSON.stringify(checkifconvo),\r\n        credentials: 'include'\r\n      }).then((res) => {\r\n        return res.json();\r\n      }).then((data) => {\r\n        if (data != null) {\r\n\r\n          setCurrentchat(data);\r\n          setOnlchatclicked(!onlchatclicked);\r\n\r\n        }\r\n        else {\r\n\r\n          setStartconv((prev) => ({ ...prev, [o._id]: true }));\r\n          selref.current = true;\r\n        }\r\n      }).catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  let startconvhandler = (o) => {\r\n\r\n    setStartconv((prev) => ({ ...prev, [o._id]: false }));\r\n\r\n\r\n    let newobj = {\r\n      senderId: curuser.userid,\r\n      receiverId: o._id\r\n    };\r\n\r\n    fetch(`${url}/messenger/create`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': \"application/json\" },\r\n      body: JSON.stringify(newobj),\r\n      credentials: 'include'\r\n    }).then((res) => {\r\n      return res.json();\r\n    }).then((datae) => {\r\n\r\n      setCurrentchat(datae);\r\n      setDraft(datae);\r\n\r\n\r\n      fetch(`${url}/messenger/delconv/${datae._id}`, {\r\n        method: 'DELETE',\r\n        credentials: 'include'\r\n      }).then((res) => {\r\n        return res.json();\r\n      }).then((data) => {\r\n\r\n      }).catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    }).catch((err) => {\r\n      console.log(err);\r\n    });\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"online\">\r\n      {onlfriends.map((o) => (\r\n        <div key={o._id}>\r\n          <div className=\"allonline\" onClick={() => handleclicker(o)}>\r\n            <div className={classadder ? \"onlinepfpcont\" : \"onlinepfpcont\"}>\r\n              {isnow && <img className=\"onlinepfp\" alt=\" \" src={o.profpic} />}\r\n\r\n              <div className=\"onlinemark\"></div>\r\n            </div>\r\n            <span className={classadder ? theme ? \"onlineusername\" : \"onlineusername onlnight\" : theme ? \"onlineusername\" : \"onlineusername onlnight\"}>{o.fullname}</span>\r\n          </div>\r\n\r\n          {startconv[o._id] && <Yesnomodal trigger={setStartconv} text={`Do you want to start conversation with `} bold={o.fullname} extra={{ purpose: \"newconv\", main: o, startconvhandler, setOnlchatclicked, skeletonidentity: onlchatclicked }} />}\r\n        </div>\r\n\r\n      ))}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Onlinechatters;","import { useEffect, useRef, useState } from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport \"../corecss/messenger.css\";\r\nimport Conversation from \"./nestedcomponents/conversations\";\r\nimport Chatabyss from \"./nestedcomponents/chatabyss\";\r\nimport Onlinechatters from \"./nestedcomponents/onlinechatters\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { io } from 'socket.io-client';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport { currview } from '../features/profile';\r\nimport { leftpsets } from '../features/leftp';\r\nimport Shimmer from \"./shimmer\";\r\n\r\n\r\n\r\nconst Messenger = () => {\r\n\r\n\r\n    let curuser = useSelector((state) => { return state.youryr.value });\r\n    let theme = useSelector((state) => { return state.themeyr.value });\r\n\r\n\r\n    let [istext, setIstext] = useState(false);\r\n    let [conversations, setConversations] = useState([]);\r\n    let [followfirst, setFollowfirst] = useState(false);\r\n    let [messages, setMessages] = useState([]);\r\n    let [Currentchat, setCurrentchat] = useState(null);\r\n    let [newtext, setNewtext] = useState(\"\");\r\n    let [chatclicked, setChatclicked] = useState(false);\r\n    let [onlusers, setOnlusers] = useState([]);\r\n    let [arrivedtext, setArrivedtext] = useState(null);\r\n    let [timearray, setTimearray] = useState([]);\r\n    let [ident, setIdent] = useState(null);\r\n    let [realcurchat, setRealcurchat] = useState([]);\r\n    let [isscrollbar, setIsscrollbar] = useState(false);\r\n    let [finalseenobj, setFinalseenobj] = useState({});\r\n    let [pfpobj, setPfpobj] = useState({});\r\n    let [viewer, setViewer] = useState(null);\r\n    let [shddel, setShddel] = useState(false);\r\n    let [textdets, setTextdets] = useState(null);\r\n    let [loader, setLoader] = useState(false);\r\n    let [info, setInfo] = useState(false);\r\n    let [newmsg, setNewmsg] = useState(false);\r\n    let [showfastscroll, setShowfastscroll] = useState(false);\r\n    let [redisplaylane, setRedisplaylane] = useState(null);\r\n    let [redselector, setRedselector] = useState({});\r\n    let [updaterchatclicked, setUpdaterchatclicked] = useState(false);\r\n    let [latestchat, setLatestchat] = useState({});\r\n    let [rectext, setRectext] = useState(null);\r\n    let [recsender, setRecsender] = useState(null);\r\n    let [draft, setDraft] = useState(null);\r\n    let [nodel, setNodel] = useState(false);\r\n    let [goback, setGoback] = useState(false);\r\n    let [groupdeletion, setGroupdeletion] = useState(false);\r\n    let [multiplelast, setMultiplelast] = useState(false);\r\n    let [someonetexted, setSomeonetexted] = useState(false);\r\n    let [fromconv, setFromconv] = useState({});\r\n    let [outsider, setOutsider] = useState({ verdict: false, data: null });\r\n    let [onlchatclicked, setOnlchatclicked] = useState(false);\r\n\r\n    let scrollref = useRef(null);\r\n    let instantref = useRef(null);\r\n    let dotref = useRef(null);\r\n    let socket = useRef(\"\");\r\n    let timeref = useRef(null);\r\n    let yarescroll = useRef(null);\r\n    let seendiv = useRef(null);\r\n    let ysone = useRef(null);\r\n    let ystwo = useRef(null);\r\n    let finalseenobjref = useRef(finalseenobj);\r\n    let Currentchatref = useRef(Currentchat);\r\n    let messagesref = useRef(messages);\r\n    let realcurchatref = useRef(realcurchat);\r\n    let realsent = useRef(false);\r\n    let onelineref = useRef(null);\r\n    let firstarray = useRef(null);\r\n    let origord = useRef(null);\r\n    let isontop = useRef(false);\r\n    let verdict = useRef(false);\r\n    let latestchatref = useRef(latestchat);\r\n    let conversationsref = useRef(conversations);\r\n    let redselectorref = useRef(redselector);\r\n    let safeinherit = useRef({});\r\n    let safeinheritval = useRef(9999999999);\r\n    let counterinit = useRef(0);\r\n    let counterfinal = useRef(0);\r\n    let truechat = useRef(null);\r\n    let onetimer = useRef(1);\r\n    let initref = useRef([]);\r\n    let skeletonsemaphore = useRef(false);\r\n\r\n    let disp = useDispatch();\r\n\r\n    let url = \"http://localhost:3001\";\r\n    //let url = \"https://social-media-app-backend-final.onrender.com\";\r\n\r\n    useEffect(() => {\r\n        socket.current = io(\"ws://localhost:3002\");\r\n\r\n        socket.current.on(\"textserver\", (data) => {\r\n\r\n            if (Currentchatref.current?._id === data.converid) {\r\n\r\n                fetch(`${url}/messenger/seen/` + data.saveID, {\r\n                    credentials: 'include'\r\n                }).then((res) => {\r\n                    return res.json();\r\n                }).then((data) => {\r\n\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                });\r\n\r\n            }\r\n\r\n            setRealcurchat((prev) => {\r\n\r\n                let newprev = prev.filter((each) => each !== data.converid);\r\n                return newprev;\r\n\r\n            });\r\n\r\n            setLatestchat((prev) => {\r\n\r\n                if (Currentchatref.current == null || !(data.converid == Currentchatref.current._id)) {\r\n                    let newobj = latestchatref.current;\r\n                    newobj[data.converid] = true;\r\n                    return { ...newobj };\r\n                }\r\n                else {\r\n                    let newobj = latestchatref.current;\r\n                    newobj[data.converid] = false;\r\n                    return { ...newobj };\r\n                }\r\n            });\r\n\r\n\r\n            setConversations((prev) => {\r\n\r\n                setFollowfirst(true);\r\n                let temparr = conversationsref.current;\r\n                let onevaluearr = temparr.filter((elem) => {\r\n                    return elem._id === data.converid;\r\n                })\r\n\r\n                if (onevaluearr.length == 0) {\r\n\r\n                    let newobj = {\r\n                        _id: data.converid,\r\n                        members: [curuser.userid, data.sender],\r\n                        holders: [curuser.userid, data.sender]\r\n                    };\r\n\r\n                    temparr.unshift(newobj);\r\n                    return [...temparr];\r\n\r\n                } else {\r\n\r\n                    let newarr = temparr.filter((elem) => {\r\n                        return elem._id !== data.converid;\r\n                    })\r\n                    newarr.unshift(onevaluearr[0]);\r\n                    return [...newarr];\r\n                }\r\n\r\n\r\n            });\r\n\r\n\r\n            if (messagesref.current.length == 0) {\r\n\r\n                setSomeonetexted(true);\r\n            }\r\n            else if (messagesref.current[0].conversationId !== data.converid) {\r\n\r\n                setSomeonetexted(true);\r\n\r\n            }\r\n            else {\r\n\r\n                setArrivedtext({\r\n                    conversationId: data.converid,\r\n                    sender: data.sender,\r\n                    receiver: data.receiver,\r\n                    thetext: data.recenttext,\r\n                    createdAt: Date.now(),\r\n                    status: data.status,\r\n                    order: data.order,\r\n                    holders: data.holders\r\n                });\r\n\r\n            }\r\n\r\n            if (Currentchatref.current != null) {\r\n\r\n                if (Currentchatref.current._id === data.curchat._id) {\r\n\r\n                    for (let i = messagesref.current.length - 1; i >= 0; i--) {\r\n                        if (messagesref.current[i]?.status == true) {\r\n\r\n                            const receiverid = Currentchatref.current.members.find((elem) => elem !== curuser.userid);\r\n\r\n                            fetch(`${url}/messenger/ex/` + Currentchatref.current._id, {\r\n                                credentials: 'include'\r\n                            }).then((res) => {\r\n                                return res.json();\r\n                            }).then((data) => {\r\n\r\n                                messagesref.current = data;\r\n                                socket.current.emit(\"clientseen\", {\r\n                                    receiverid,\r\n                                    status: true,\r\n                                    messagesREC: data,\r\n                                    curchat: Currentchatref.current\r\n                                });\r\n                            }).catch((err) => {\r\n                                console.log(err);\r\n                            });\r\n                            break;\r\n                        }\r\n                        else if (messagesref.current[i]?.sender !== curuser.userid) {\r\n\r\n                            fetch(`${url}/messenger/seen/` + messagesref.current[i]?._id, {\r\n                                credentials: 'include'\r\n                            }).then((res) => {\r\n                                return res.json();\r\n                            }).then((data) => {\r\n\r\n                            }).catch((err) => {\r\n                                console.log(err);\r\n                            });\r\n\r\n                        }\r\n\r\n                        const receiverid = Currentchatref.current.members.find((elem) => elem !== curuser.userid);\r\n\r\n                        fetch(`${url}/messenger/ex/` + Currentchatref.current._id, {\r\n                            credentials: 'include'\r\n                        }).then((res) => {\r\n                            return res.json();\r\n                        }).then((data) => {\r\n\r\n                            messagesref.current = data;\r\n                            socket.current.emit(\"clientseen\", {\r\n                                receiverid,\r\n                                status: true,\r\n                                messagesREC: data,\r\n                                curchat: Currentchatref.current\r\n                            });\r\n                        }).catch((err) => {\r\n                            console.log(err);\r\n                        });\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            if (data.sender === curuser.userid) {\r\n                timeref.current = true;\r\n            }\r\n            else {\r\n                timeref.current = false;\r\n            }\r\n        });\r\n\r\n        socket.current.on(\"servertypes\", (data) => {\r\n\r\n\r\n            if (data.status) {\r\n                if (!realcurchatref.current.includes(data.curchat._id)) {\r\n                    setRealcurchat((prev) => {\r\n                        return [...prev, data.curchat._id];\r\n                    });\r\n                }\r\n            } else if (!data.status) {\r\n                if (realcurchatref.current.includes(data.curchat._id)) {\r\n                    setRealcurchat((prev) => {\r\n\r\n                        let newprev = prev.filter((each) => each !== data.curchat._id);\r\n                        return newprev;\r\n\r\n                    });\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n\r\n\r\n        socket.current.on(\"serverseen\", (data) => {\r\n\r\n            let holtexs = data.messagesREC.filter((each) => {\r\n                return each.holders.includes(curuser.userid);\r\n            })\r\n\r\n            let bitexts = data.messagesREC.filter((each) => {\r\n                return each.holders.includes(curuser.userid);\r\n            })\r\n\r\n            bitexts[bitexts.length - 1].status = true;\r\n            for (let i = bitexts.length - 1; i >= 0; i--) {\r\n                if (finalseenobjref.current[bitexts[i]._id] == true) {\r\n                    break;\r\n                }\r\n                else if (bitexts[i].sender === curuser.userid) {\r\n                    setFinalseenobj((prev) => ({ ...prev, [bitexts[i]._id]: true }));\r\n                }\r\n            }\r\n\r\n            setMessages(holtexs);\r\n        });\r\n\r\n        socket.current.on('servertextdel', (data) => {\r\n\r\n            fetch(`${url}/messenger/ex/${data.convid}`, {\r\n                credentials: 'include'\r\n            }).then((res) => {\r\n                return res.json();\r\n            }).then((data) => {\r\n\r\n                let holtexts = data.filter((each) => each.holders.includes(curuser.userid));\r\n                setMessages(holtexts);\r\n\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            });\r\n\r\n\r\n        });\r\n\r\n\r\n\r\n        socket.current.on('serverdelchange', (data) => {\r\n\r\n            fetch(`${url}/messenger/lineup/order/${curuser.userid}`, {\r\n                credentials: 'include'\r\n            }).then((res) => {\r\n                return res.json();\r\n            }).then((data) => {\r\n\r\n                setConversations(data.convs.lineup);\r\n                setFollowfirst(true);\r\n                if (data.convs.unread != undefined) {\r\n                    setLatestchat(data.convs.unread);\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n\r\n\r\n\r\n        });\r\n\r\n\r\n        socket.current.on('serveraddholder', (data) => {\r\n\r\n            fetch(`${url}/messenger/lineupholder/${curuser.userid}`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': \"application/json\" },\r\n                body: JSON.stringify({ members: data.members, curchat: data.curchat }),\r\n                credentials: 'include'\r\n            }).then((res) => {\r\n                return res.json();\r\n            }).then((datum) => {\r\n                setTimeout(() => {\r\n\r\n                    setConversations((prev) => {\r\n                        setFollowfirst(true);\r\n                        let temparr = datum.lineup;\r\n                        let onevaluearr = temparr.filter((elem) => {\r\n                            return elem._id === data.curchat;\r\n                        })\r\n                        let newarr = temparr.filter((elem) => {\r\n                            return elem._id !== data.curchat;\r\n                        })\r\n\r\n                        if (onevaluearr.length == 0) {\r\n\r\n                            let newobj = {\r\n                                _id: data.curchat,\r\n                                members: data.members,\r\n                                holders: data.members\r\n                            };\r\n\r\n                            newarr.unshift(newobj);\r\n                            return [...newarr];\r\n\r\n                        }\r\n                        else {\r\n                            newarr.unshift(onevaluearr[0]);\r\n                            return [...newarr];\r\n                        }\r\n\r\n                    });\r\n\r\n                }, 3000);\r\n\r\n\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            });\r\n\r\n        });\r\n\r\n        socket.current.on('serverchangetextnums', (datamain) => {\r\n\r\n            let nevertexts = [];\r\n\r\n            for (let i = datamain.nevermessages.length - 1; i >= 0; i--) {\r\n\r\n                if (datamain.nevermessages[i].status === true) {\r\n                    break;\r\n                } else {\r\n                    nevertexts.unshift(datamain.nevermessages[i]);\r\n                }\r\n\r\n\r\n            }\r\n\r\n            if (nevertexts.length == datamain.nevermessages.length) {\r\n\r\n\r\n                setConversations(() => {\r\n\r\n                    setFollowfirst(true);\r\n\r\n                    let newlineup = conversationsref.current.filter((each) => {\r\n                        return each._id != datamain.convid;\r\n                    })\r\n                    return [...newlineup];\r\n\r\n                })\r\n\r\n                setLatestchat(() => {\r\n\r\n                    let newunread = latestchatref.current;\r\n                    delete newunread[datamain.convid];\r\n                    return { ...newunread };\r\n\r\n                })\r\n\r\n\r\n                fetch(`${url}/messenger/lineup/checker/${curuser.userid}`, {\r\n                    credentials: 'include'\r\n                }).then((data) => {\r\n                    return data.json();\r\n                }).then((res) => {\r\n\r\n                    let newlineup = res.lineup.filter((each) => each._id != datamain.convid);\r\n                    delete res.unread[datamain.convid];\r\n\r\n                    let newobj = {\r\n                        lineup: newlineup,\r\n                        unread: res.unread\r\n                    }\r\n\r\n\r\n                    fetch(`${url}/messenger/lineup/${curuser.userid}`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': \"application/json\" },\r\n                        body: JSON.stringify(newobj),\r\n                        credentials: 'include'\r\n                    }).then((data) => {\r\n                        return data.json();\r\n                    }).then((res) => {\r\n                        console.log(res);\r\n                    });\r\n\r\n\r\n                })\r\n\r\n                async function remconv() {\r\n\r\n\r\n                    const response = await fetch(`${url}/messenger/delconv/${datamain.convid}`, {\r\n                        method: 'DELETE',\r\n                        credentials: 'include'\r\n                    });\r\n\r\n                    const ans = await response.json();\r\n\r\n                };\r\n\r\n                remconv();\r\n\r\n                if (!datamain.nevermessages.length == 0) {\r\n\r\n                    datamain.nevermessages.map((each) => {\r\n\r\n                        each.receffected.map((lessereach) => {\r\n\r\n                            fetch(`${url}/messenger/decrementer/${lessereach}`, {\r\n                                method: 'POST',\r\n                                headers: { 'Content-Type': \"application/json\" },\r\n                                body: JSON.stringify({ id: [curuser.userid], brand: each.brand, user: 'receiver' }),\r\n                                credentials: 'include'\r\n                            }).then((res) => {\r\n                                return res.json();\r\n                            }).then((data) => {\r\n\r\n                            }).catch((err) => {\r\n                                console.log(err);\r\n                            });\r\n\r\n                        })\r\n\r\n\r\n                    })\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                setLatestchat(() => {\r\n\r\n\r\n                    let newunread = latestchatref.current;\r\n                    newunread[datamain.convid] = false;\r\n                    return { ...newunread };\r\n\r\n                })\r\n\r\n                if (nevertexts.length != 0) {\r\n\r\n                    setConversations(() => {\r\n\r\n                        setFollowfirst(true);\r\n\r\n                        let newlineup = conversationsref.current.filter((each) => {\r\n                            return each._id != datamain.convid;\r\n                        })\r\n\r\n                        let onevaluearr = conversationsref.current.filter((each) => each._id === datamain.convid);\r\n                        newlineup.splice(newlineup.length, 0, onevaluearr[0]);\r\n                        return [...newlineup];\r\n\r\n                    })\r\n\r\n                    let helperarray = [];\r\n\r\n                    for (let i = 0; i < nevertexts.length; i++) {\r\n\r\n                        for (let j = 0; j < nevertexts[i].receffected.length; j++) {\r\n\r\n                            helperarray.unshift(nevertexts[i].receffected[j]);\r\n\r\n                        }\r\n                    }\r\n\r\n                    let otherarray = conversationsref.current.filter((each) => !helperarray.includes(each));\r\n                    otherarray.map((each) => {\r\n\r\n                        fetch(`${url}/messenger/decrementer/deltype${each}`, {\r\n                            method: 'POST',\r\n                            headers: { 'Content-Type': \"application/json\" },\r\n                            body: JSON.stringify({ userid: curuser.userid }),\r\n                            credentials: 'include'\r\n                        }).then((res) => {\r\n                            return res.json();\r\n                        }).then((data) => {\r\n\r\n                        }).catch((err) => {\r\n                            console.log(err);\r\n                        });\r\n\r\n                    })\r\n\r\n                    if (!nevertexts.length == 0) {\r\n\r\n                        nevertexts.map((each) => {\r\n\r\n                            each.receffected.map((lessereach) => {\r\n\r\n                                fetch(`${url}/messenger/decrementer/${lessereach}`, {\r\n                                    method: 'POST',\r\n                                    headers: { 'Content-Type': \"application/json\" },\r\n                                    body: JSON.stringify({ id: [curuser.userid], brand: each.brand, user: 'receiver' }),\r\n                                    credentials: 'include'\r\n                                }).then((res) => {\r\n                                    return res.json();\r\n                                }).then((data) => {\r\n\r\n                                }).catch((err) => {\r\n                                    console.log(err);\r\n                                });\r\n                            })\r\n                        })\r\n                    }\r\n                }\r\n\r\n\r\n\r\n                setTimeout(() => {\r\n\r\n                    fetch(`${url}/messenger/lineup/checker/${curuser.userid}`, {\r\n                        credentials: 'include'\r\n                    }).then((data) => {\r\n                        return data.json();\r\n                    }).then((res) => {\r\n\r\n                        let conv = res.lineup.filter((each) => each._id == datamain.convid);\r\n                        let one = conv[0];\r\n\r\n                        const func = (elem) => elem == one\r\n                        let index = res.lineup.findIndex(func);\r\n\r\n                        if (one.holders.length == 0) {\r\n                            one.holders.push(curuser.userid);\r\n                        } else {\r\n\r\n                            let newholder = one.holders.filter((each) => each != curuser.userid);\r\n                            one.holders = newholder;\r\n\r\n                        }\r\n\r\n                        let newlineup = res.lineup;\r\n                        newlineup[index] = one;\r\n\r\n                        let newobj = {\r\n                            lineup: newlineup,\r\n                            unread: res.unread\r\n                        }\r\n\r\n                        fetch(`${url}/messenger/lineup/${curuser.userid}`, {\r\n                            method: 'POST',\r\n                            headers: { 'Content-Type': \"application/json\" },\r\n                            body: JSON.stringify(newobj),\r\n                            credentials: 'include'\r\n                        }).then((data) => {\r\n                            return data.json();\r\n                        }).then((res) => {\r\n\r\n                        });\r\n\r\n\r\n                    })\r\n\r\n                }, 2000);\r\n\r\n\r\n            }\r\n\r\n\r\n        });\r\n\r\n\r\n        socket.current.on('newestdata', () => {\r\n\r\n            if (updaterchatclicked) {\r\n\r\n                setUpdaterchatclicked(false);\r\n\r\n            } else {\r\n\r\n                if (Currentchatref.current != null) {\r\n\r\n\r\n                    fetch(`${url}/messenger/ex/${Currentchatref.current._id}`, {\r\n                        credentials: 'include'\r\n                    }).then((res) => {\r\n                        return res.json();\r\n                    }).then((data) => {\r\n\r\n                        let holtexts = data.filter((each) => each.holders.includes(curuser.userid));\r\n                        setMessages(holtexts);\r\n\r\n                    }).catch((err) => {\r\n                        console.log(err);\r\n                    });\r\n\r\n                    async function newestcurconv() {\r\n\r\n                        const response = await fetch(`${url}/messenger/alreadyconv/checker`,\r\n                            {\r\n                                method: 'POST',\r\n                                headers: { 'Content-Type': \"application/json\" },\r\n                                body: JSON.stringify(Currentchatref.current.members),\r\n                                credentials: 'include'\r\n                            }\r\n                        );\r\n\r\n                        const verdict = await response.json();\r\n\r\n                        if (verdict != null) {\r\n                            if (Currentchatref.current._id === verdict._id) {\r\n                                Currentchatref.current = verdict\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                    newestcurconv();\r\n\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n\r\n        let decider = window.location.href.substring(32)[0];\r\n\r\n        if (decider[0] == 'o') {\r\n\r\n            let outsiderid = window.location.href.substring(41);\r\n\r\n            let newobj = {\r\n                senderId: curuser.userid,\r\n                receiverId: outsiderid,\r\n            };\r\n\r\n            fetch(`${url}/messenger/create`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': \"application/json\" },\r\n                body: JSON.stringify(newobj),\r\n                credentials: 'include'\r\n            }).then((res) => {\r\n                return res.json();\r\n            }).then((datae) => {\r\n\r\n                setCurrentchat(datae);\r\n                setDraft(datae);\r\n\r\n\r\n                fetch(`${url}/messenger/delconv/${datae._id}`, {\r\n                    method: 'DELETE',\r\n                    credentials: 'include'\r\n                }).then((res) => {\r\n                    return res.json();\r\n                }).then((data) => {\r\n\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                });\r\n\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            });\r\n\r\n        }\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        finalseenobjref.current = finalseenobj;\r\n    }, [finalseenobj]);\r\n\r\n    useEffect(() => {\r\n        realcurchatref.current = realcurchat;\r\n    }, [realcurchat]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        if (someonetexted) {\r\n            setSomeonetexted(false);\r\n\r\n            if (Currentchatref.current != null) {\r\n\r\n                const receiverid = Currentchatref.current.members.find((elem) => elem !== curuser.userid);\r\n\r\n                fetch(`${url}/messenger/ex/${Currentchatref.current._id}`, {\r\n                    credentials: 'include'\r\n                }).then((res) => {\r\n                    return res.json();\r\n                }).then((data) => {\r\n\r\n                    let holtexts = data.filter((each) => each.holders.includes(curuser.userid));\r\n                    setMessages(holtexts);\r\n\r\n                    socket.current.emit('clienttextdel', {\r\n                        receiverid,\r\n                        convid: Currentchatref.current._id\r\n                    });\r\n\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }, [someonetexted]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        function remtyper(event) {\r\n            if (!event.target.matches('.chatfield')) {\r\n\r\n                const receiverid = Currentchat?.members.find((elem) => elem !== curuser.userid);\r\n\r\n                socket.current.emit(\"clienttypes\", {\r\n                    dims: null,\r\n                    status: false,\r\n                    receiverid,\r\n                    curchat: Currentchat\r\n                });\r\n\r\n            }\r\n        }\r\n        document.addEventListener(\"click\", remtyper);\r\n        return () => {\r\n            document.removeEventListener(\"click\", remtyper);\r\n        };\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        function scrollup(event) {\r\n\r\n            if (Math.abs((yarescroll.current?.scrollHeight - yarescroll.current?.clientHeight) - yarescroll.current?.scrollTop) > 80) {\r\n                if (!newmsg) {\r\n                    setShowfastscroll(true);\r\n                }\r\n            } else {\r\n                setShowfastscroll(false);\r\n                setNewmsg(false);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        yarescroll.current?.addEventListener(\"scroll\", scrollup);\r\n        return () => {\r\n            yarescroll.current?.removeEventListener(\"scroll\", scrollup);\r\n        };\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n\r\n            if (Math.abs((yarescroll.current?.scrollHeight - yarescroll.current?.clientHeight) - yarescroll.current?.scrollTop) <= 49) {\r\n                setTimeout(() => {\r\n                    seendiv.current?.scrollIntoView({ behavior: \"smooth\" });\r\n                }, 10);\r\n\r\n\r\n            } else {\r\n\r\n                if (arrivedtext != null) {\r\n                    setNewmsg(true);\r\n                    setShowfastscroll(false);\r\n\r\n                }\r\n            }\r\n\r\n\r\n            arrivedtext && Currentchat?.members.includes(arrivedtext.sender) &&\r\n                setMessages((prev) => {\r\n\r\n                    return [...prev, arrivedtext]\r\n\r\n                });\r\n\r\n            setTimeout(() => {\r\n                setSomeonetexted(true);\r\n            }, 1000);\r\n\r\n            arrivedtext && Currentchat?.members.includes(arrivedtext.sender) &&\r\n                setTimearray((prev) => [...prev, timeref.current]);\r\n\r\n\r\n        }, 1000);\r\n\r\n    }, [arrivedtext]);\r\n\r\n\r\n\r\n    let searcher = (e) => {\r\n\r\n        if (e.target.value === '') {\r\n            setViewer(null);\r\n        }\r\n        else {\r\n\r\n            fetch(`${url}/messenger/lineup/order/${curuser.userid}`, {\r\n                credentials: 'include'\r\n            }).then((res) => {\r\n                return res.json();\r\n            }).then((data) => {\r\n\r\n                origord.current = data.convs.lineup;\r\n                firstarray.current = data.searchhelper;\r\n\r\n                let searcharr = firstarray.current.map((each) => {\r\n\r\n                    const regex = new RegExp(`^${e.target.value}`);\r\n\r\n                    if (regex.test(each[0]) || regex.test(each[1])) {\r\n                        for (let i = 0; i < origord.current.length; i++) {\r\n                            if (origord.current[i].members.includes(each[2])) {\r\n                                return origord.current[i];\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n\r\n                setViewer(searcharr.filter((each) => each != undefined));\r\n\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    let textdoer = (e) => {\r\n\r\n        const receiverid = Currentchat.members.find((elem) => elem !== curuser.userid);\r\n\r\n        ystwo.current = yarescroll.current?.scrollHeight - yarescroll.current?.clientHeight;\r\n\r\n        socket.current.emit(\"clienttypes\", {\r\n            dims: ystwo.current,\r\n            status: true,\r\n            receiverid,\r\n            curchat: Currentchat\r\n        });\r\n\r\n        if (/[^\\s]/.test(e.target.value)) {\r\n            setIstext(true);\r\n        }\r\n        else {\r\n            setIstext(false);\r\n        }\r\n        setNewtext(e.target.value);\r\n    }\r\n\r\n    let handlesender = (e) => {\r\n\r\n        realsent.current = true;\r\n\r\n        e.preventDefault();\r\n        setIstext(false);\r\n\r\n        let alreadytop;\r\n\r\n        if (conversationsref.current[0]?._id === Currentchatref.current._id) {\r\n            alreadytop = true;\r\n        } else {\r\n            alreadytop = false;\r\n\r\n        }\r\n\r\n        const receiverid = Currentchat.members.find((elem) => elem !== curuser.userid);\r\n\r\n\r\n        let len = conversationsref.current.length;\r\n        let lastidx;\r\n\r\n        if (messagesref.current[messagesref.current.length - 1] === undefined) {\r\n            lastidx = conversationsref.current.length;\r\n        } else {\r\n            lastidx = messagesref.current[messagesref.current.length - 1]?.order[curuser.userid];\r\n        }\r\n\r\n        let lastidxrecf;\r\n        if (messagesref.current[messagesref.current.length - 1] != undefined) {\r\n            lastidxrecf = messagesref.current[messagesref.current.length - 1].order[receiverid];\r\n        }\r\n\r\n        ysone.current = yarescroll.current?.scrollHeight - yarescroll.current?.clientHeight;\r\n\r\n        if (Currentchatref.current.holders.length == 1) {\r\n\r\n            if (Currentchatref.current.holders.includes(curuser.userid)) {\r\n\r\n                fetch(`${url}/messenger/lineupholder/${curuser.userid}`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': \"application/json\" },\r\n                    body: JSON.stringify({ members: Currentchatref.current.members, curchat: Currentchatref.current._id }),\r\n                    credentials: 'include'\r\n                }).then((res) => {\r\n                    return res.json();\r\n                }).then((data) => {\r\n\r\n                    setTimeout(() => {\r\n\r\n                        setConversations((prev) => {\r\n\r\n                            setFollowfirst(true);\r\n                            let temparr = data.lineup;\r\n\r\n                            let onevaluearr = temparr.filter((elem) => {\r\n                                return elem._id === Currentchatref.current._id;\r\n                            })\r\n                            let newarr = temparr.filter((elem) => {\r\n                                return elem._id !== Currentchatref.current._id;\r\n                            })\r\n                            if (onevaluearr.length == 0) {\r\n\r\n                                let newobj = {\r\n                                    _id: Currentchatref.current._id,\r\n                                    members: [curuser.userid, receiverid],\r\n                                    holders: [curuser.userid, receiverid]\r\n                                };\r\n\r\n                                newarr.unshift(newobj);\r\n                                return [...newarr];\r\n\r\n                            }\r\n                            else {\r\n\r\n                                newarr.unshift(onevaluearr[0]);\r\n                                return [...newarr];\r\n\r\n                            }\r\n\r\n                        });\r\n\r\n                    }, 3000);\r\n\r\n\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                });\r\n\r\n            } else {\r\n\r\n                socket.current.emit('clientaddholder', {\r\n                    receiverid,\r\n                    curchat: Currentchatref.current._id,\r\n                    members: Currentchatref.current.members\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n\r\n        setConversations((prev) => {\r\n\r\n            setFollowfirst(true);\r\n            let temparr = conversationsref.current;\r\n\r\n            let onevaluearr = temparr.filter((elem) => {\r\n                return elem._id === Currentchatref.current._id;\r\n            })\r\n            let newarr = temparr.filter((elem) => {\r\n                return elem._id !== Currentchatref.current._id;\r\n            })\r\n            if (onevaluearr.length == 0) {\r\n\r\n                let newobj = {\r\n                    _id: Currentchatref.current._id,\r\n                    members: [curuser.userid, receiverid],\r\n                    holders: [curuser.userid, receiverid]\r\n                };\r\n\r\n                newarr.unshift(newobj);\r\n                return [...newarr];\r\n\r\n            }\r\n            else {\r\n                newarr.unshift(onevaluearr[0]);\r\n                return [...newarr];\r\n            }\r\n\r\n        });\r\n\r\n\r\n        async function isconv() {\r\n\r\n            const response = await fetch(`${url}/messenger/alreadyconv/checker`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': \"application/json\" },\r\n                    body: JSON.stringify([curuser.userid, receiverid]),\r\n                    credentials: 'include'\r\n                }\r\n            );\r\n\r\n            const verdict = await response.json();\r\n\r\n            fetch(`${url}/messenger/holderedit/${curuser.userid}`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': \"application/json\" },\r\n                body: JSON.stringify({ members: Currentchatref.current.members, curchat: Currentchatref.current._id }),\r\n                credentials: 'include'\r\n            }).then((res) => {\r\n                return res.json();\r\n            }).then((data) => {\r\n\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n\r\n\r\n            if (verdict === null) {\r\n\r\n                let newbrand = uuidv4();\r\n\r\n                if (!alreadytop) {\r\n\r\n\r\n                    for (let i = 0; i <= len; i++) {\r\n\r\n                        if (conversationsref.current[i]?._id !== Currentchatref.current._id) {\r\n\r\n                            fetch(`${url}/messenger/incrementer/${conversationsref.current[i]._id}`, {\r\n                                method: 'POST',\r\n                                headers: { 'Content-Type': \"application/json\" },\r\n                                body: JSON.stringify({ id: curuser.userid, brand: newbrand, new: true, user: 'curuser', comparerval: null }),\r\n                                credentials: 'include'\r\n\r\n                            }).then((res) => {\r\n                                return res.json();\r\n                            }).then((data) => {\r\n\r\n                            }).catch((err) => {\r\n                                console.log(err);\r\n                            });\r\n\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n                }\r\n\r\n\r\n                let recid = null;\r\n                if (draft.members[0] == curuser.userid) {\r\n                    recid = draft.members[1];\r\n                }\r\n                else {\r\n                    recid = draft.members[0];\r\n                }\r\n\r\n                let newobj = {\r\n                    senderId: curuser.userid,\r\n                    receiverId: recid\r\n                };\r\n\r\n                fetch(`${url}/messenger/create`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': \"application/json\" },\r\n                    body: JSON.stringify(newobj),\r\n                    credentials: 'include'\r\n                }).then((res) => {\r\n                    return res.json();\r\n                }).then((data) => {\r\n\r\n                    let correctdata = data;\r\n                    setCurrentchat(data);\r\n\r\n                    setConversations([data, ...conversations]);\r\n                    setFollowfirst(true);\r\n                    setDraft(null);\r\n                    const receiverid = data.members.find((elem) => elem !== curuser.userid);\r\n\r\n                    let zeroobj = {\r\n                        [curuser.userid]: 0,\r\n                        [receiverid]: 0\r\n                    };\r\n\r\n                    let helper = conversationsref.current.map((each) => {\r\n                        if (each._id != Currentchatref.current._id) {\r\n                            return each._id;\r\n                        }\r\n                    });\r\n\r\n                    let curusereffected = helper.filter((each) => {\r\n                        return each != null;\r\n                    })\r\n\r\n                    let receivereffected;\r\n\r\n                    fetch(`${url}/messenger/lineup/checker/${receiverid}`, {\r\n                        credentials: 'include'\r\n                    }).then((res) => {\r\n                        return res.json();\r\n                    }).then((data) => {\r\n\r\n                        if (data == null) {\r\n\r\n                            receivereffected = [];\r\n                            if (!(onelineref.current.includes(receiverid))) {\r\n\r\n                                let newobj = {\r\n                                    username: \"\",\r\n                                    userid: receiverid,\r\n                                    lineup: [Currentchatref.current],\r\n                                    unread: { [Currentchatref.current._id]: true, necessary: false }\r\n                                }\r\n\r\n                                fetch(`${url}/messenger/lineup/create`, {\r\n                                    method: 'POST',\r\n                                    headers: { 'Content-Type': \"application/json\" },\r\n                                    body: JSON.stringify(newobj),\r\n                                    credentials: 'include'\r\n                                }).then((res) => {\r\n                                    return res.json();\r\n                                }).then((data) => {\r\n\r\n                                    const newmsg = {\r\n                                        conversationId: correctdata._id,\r\n                                        sender: curuser.userid,\r\n                                        receiver: receiverid,\r\n                                        thetext: newtext,\r\n                                        status: false,\r\n                                        order: zeroobj,\r\n                                        holders: [curuser.userid, receiverid],\r\n                                        brand: { own: [newbrand] },\r\n                                        branding: [],\r\n                                        effected: curusereffected,\r\n                                        recbranding: [],\r\n                                        receffected: receivereffected\r\n                                    };\r\n\r\n                                    fetch(`${url}/messenger/send`, {\r\n                                        method: 'POST',\r\n                                        headers: { 'Content-Type': \"application/json\" },\r\n                                        body: JSON.stringify(newmsg),\r\n                                        credentials: 'include'\r\n                                    }).then((res) => {\r\n                                        return res.json();\r\n                                    }).then((newdata) => {\r\n\r\n                                        socket.current.emit(\"textclient\", {\r\n                                            senderid: curuser.userid,\r\n                                            receiverid,\r\n                                            recenttext: newtext,\r\n                                            converid: correctdata._id,\r\n                                            saveID: newdata._id,\r\n                                            curchat: Currentchatref.current,\r\n                                            status: false,\r\n                                            order: zeroobj,\r\n                                            holders: [curuser.userid, receiverid],\r\n                                            brand: newdata.brand.own[0],\r\n                                            branding: newdata.branding,\r\n                                            effected: newdata.effected,\r\n                                            recbranding: newdata.recbranding,\r\n                                            receffected: newdata.receffected,\r\n                                            newlatestchat: data.unread,\r\n                                            newconversationlineup: data.lineup\r\n\r\n\r\n                                        });\r\n\r\n\r\n\r\n\r\n                                        setMessages([...messages, newdata]);\r\n                                        setTimearray([...timearray, true]);\r\n                                        setNewtext(\"\");\r\n                                        setChatclicked(false);\r\n\r\n                                    }).catch((err) => {\r\n                                        console.log(err);\r\n                                    });\r\n\r\n\r\n                                }).catch((err) => {\r\n                                    console.log(err);\r\n                                })\r\n\r\n                            }\r\n                        }\r\n\r\n                        else if (data.lineup.length == 0) {\r\n\r\n\r\n                            receivereffected = [];\r\n\r\n\r\n                            if (!(onelineref.current.includes(receiverid))) {\r\n\r\n\r\n                                let newobj = {\r\n                                    lineup: [Currentchatref.current],\r\n                                    unread: { [Currentchatref.current._id]: true, necessary: false }\r\n                                }\r\n\r\n                                fetch(`${url}/messenger/lineup/${receiverid}`, {\r\n                                    method: 'POST',\r\n                                    headers: { 'Content-Type': \"application/json\" },\r\n                                    body: JSON.stringify(newobj),\r\n                                    credentials: 'include'\r\n                                }).then((res) => {\r\n                                    return res.json();\r\n                                }).then((data) => {\r\n\r\n                                    const newmsg = {\r\n                                        conversationId: correctdata._id,\r\n                                        sender: curuser.userid,\r\n                                        receiver: receiverid,\r\n                                        thetext: newtext,\r\n                                        status: false,\r\n                                        order: zeroobj,\r\n                                        holders: [curuser.userid, receiverid],\r\n                                        brand: { own: [newbrand] },\r\n                                        branding: [],\r\n                                        effected: curusereffected,\r\n                                        recbranding: [],\r\n                                        receffected: receivereffected\r\n                                    };\r\n\r\n                                    fetch(`${url}/messenger/send`, {\r\n                                        method: 'POST',\r\n                                        headers: { 'Content-Type': \"application/json\" },\r\n                                        body: JSON.stringify(newmsg),\r\n                                        credentials: 'include'\r\n                                    }).then((res) => {\r\n                                        return res.json();\r\n                                    }).then((newdata) => {\r\n\r\n                                        socket.current.emit(\"textclient\", {\r\n                                            senderid: curuser.userid,\r\n                                            receiverid,\r\n                                            recenttext: newtext,\r\n                                            converid: correctdata._id,\r\n                                            saveID: newdata._id,\r\n                                            curchat: Currentchatref.current,\r\n                                            status: false,\r\n                                            order: zeroobj,\r\n                                            holders: [curuser.userid, receiverid],\r\n                                            brand: newdata.brand.own[0],\r\n                                            branding: newdata.branding,\r\n                                            effected: newdata.effected,\r\n                                            recbranding: newdata.recbranding,\r\n                                            receffected: newdata.receffected,\r\n                                            newlatestchat: data.unread,\r\n                                            newconversationlineup: data.lineup\r\n                                        });\r\n\r\n                                        setMessages([...messages, newdata]);\r\n                                        setTimearray([...timearray, true]);\r\n                                        setNewtext(\"\");\r\n                                        setChatclicked(false);\r\n\r\n                                    }).catch((err) => {\r\n                                        console.log(err);\r\n                                    });\r\n\r\n\r\n                                }).catch((err) => {\r\n                                    console.log(err);\r\n                                })\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                        else {\r\n\r\n\r\n                            let rechelper = data.lineup.map((each) => {\r\n\r\n                                return each._id;\r\n\r\n                            });\r\n\r\n                            receivereffected = rechelper.filter((each) => {\r\n                                return each != null;\r\n                            })\r\n\r\n                            if (!(onelineref.current.includes(receiverid))) {\r\n\r\n                                let newobj = {};\r\n                                let newarr = data.lineup.filter((elem) => elem._id != Currentchatref.current._id);\r\n                                if (data.unread != undefined) {\r\n                                    if (Object.keys(data.unread).includes(Currentchatref.current._id)) {\r\n                                        data.unread[Currentchatref.current._id] = true;\r\n                                        newobj = {\r\n                                            lineup: [Currentchatref.current, ...newarr],\r\n                                            unread: data.unread\r\n                                        }\r\n                                    } else {\r\n\r\n                                        newobj = {\r\n                                            lineup: [Currentchatref.current, ...newarr],\r\n                                            unread: { ...data.unread, [Currentchatref.current._id]: true }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    newobj = {\r\n                                        lineup: [Currentchatref.current, ...newarr],\r\n                                        unread: { [Currentchatref.current._id]: true }\r\n                                    }\r\n\r\n                                }\r\n\r\n\r\n                                fetch(`${url}/messenger/lineup/${receiverid}`, {\r\n                                    method: 'POST',\r\n                                    headers: { 'Content-Type': \"application/json\" },\r\n                                    body: JSON.stringify(newobj),\r\n                                    credentials: 'include'\r\n                                }).then((res) => {\r\n                                    return res.json();\r\n                                }).then((datam) => {\r\n\r\n\r\n                                    for (let i = 0; i < data.lineup.length; i++) {\r\n\r\n\r\n                                        if (data.lineup[i]._id != Currentchatref.current._id) {\r\n\r\n                                            fetch(`${url}/messenger/incrementer/${data.lineup[i]._id}`, {\r\n                                                method: 'POST',\r\n                                                headers: { 'Content-Type': \"application/json\" },\r\n                                                body: JSON.stringify({ id: receiverid, brand: newbrand, new: true, user: 'receiver', comparerval: null }),\r\n                                                credentials: 'include'\r\n\r\n                                            }).then((res) => {\r\n                                                return res.json();\r\n                                            }).then((data) => {\r\n\r\n                                            }).catch((err) => {\r\n                                                console.log(err);\r\n                                            });\r\n\r\n                                        }\r\n\r\n                                    }\r\n\r\n                                    const newmsg = {\r\n                                        conversationId: correctdata._id,\r\n                                        sender: curuser.userid,\r\n                                        receiver: receiverid,\r\n                                        thetext: newtext,\r\n                                        status: false,\r\n                                        order: zeroobj,\r\n                                        holders: [curuser.userid, receiverid],\r\n                                        brand: { own: [newbrand] },\r\n                                        branding: [],\r\n                                        effected: curusereffected,\r\n                                        recbranding: [],\r\n                                        receffected: receivereffected\r\n                                    };\r\n\r\n                                    fetch(`${url}/messenger/send`, {\r\n                                        method: 'POST',\r\n                                        headers: { 'Content-Type': \"application/json\" },\r\n                                        body: JSON.stringify(newmsg),\r\n                                        credentials: 'include'\r\n                                    }).then((res) => {\r\n                                        return res.json();\r\n                                    }).then((newdata) => {\r\n\r\n                                        socket.current.emit(\"textclient\", {\r\n                                            senderid: curuser.userid,\r\n                                            receiverid,\r\n                                            recenttext: newtext,\r\n                                            converid: correctdata._id,\r\n                                            saveID: newdata._id,\r\n                                            curchat: Currentchatref.current,\r\n                                            status: false,\r\n                                            order: zeroobj,\r\n                                            holders: [curuser.userid, receiverid],\r\n                                            brand: newdata.brand.own[0],\r\n                                            branding: newdata.branding,\r\n                                            effected: newdata.effected,\r\n                                            recbranding: newdata.recbranding,\r\n                                            receffected: newdata.receffected,\r\n                                            newlatestchat: data.unread,\r\n                                            newconversationlineup: data.lineup\r\n                                        });\r\n\r\n\r\n                                        setMessages([...messages, newdata]);\r\n                                        setTimearray([...timearray, true]);\r\n                                        setNewtext(\"\");\r\n                                        setChatclicked(false);\r\n\r\n                                    }).catch((err) => {\r\n                                        console.log(err);\r\n                                    });\r\n\r\n\r\n\r\n                                }).catch((err) => {\r\n                                    console.log(err);\r\n                                })\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n\r\n                    }).catch((err) => {\r\n                        console.log(err);\r\n                    });\r\n\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                });\r\n\r\n\r\n            } else {\r\n\r\n                if (verdict.holders.length == 2) {\r\n\r\n                    let newbrand = uuidv4();\r\n\r\n                    if (!alreadytop) {\r\n\r\n                        for (let i = 0; i <= lastidx; i++) {\r\n\r\n                            if (i < conversationsref.current.length) {\r\n\r\n                                if (conversationsref.current[i]._id !== Currentchatref.current._id && conversationsref.current[i] != undefined) {\r\n\r\n\r\n                                    fetch(`${url}/messenger/incrementer/${conversationsref.current[i]._id}`, {\r\n                                        method: 'POST',\r\n                                        headers: { 'Content-Type': \"application/json\" },\r\n                                        body: JSON.stringify({ id: curuser.userid, brand: newbrand, new: false, user: 'curuser', comparerval: lastidx }),\r\n                                        credentials: 'include'\r\n\r\n                                    }).then((res) => {\r\n                                        return res.json();\r\n                                    }).then((data) => {\r\n\r\n                                    }).catch((err) => {\r\n                                        console.log(err);\r\n                                    });\r\n\r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                    const receiverid = Currentchat.members.find((elem) => elem !== curuser.userid);\r\n\r\n                    let zeroobj = {\r\n                        [curuser.userid]: 0,\r\n                        [receiverid]: 0\r\n                    };\r\n\r\n                    let curusereffected = [];\r\n\r\n                    for (let i = 0; i <= lastidx; i++) {\r\n\r\n                        if (conversationsref.current[i] != undefined) {\r\n\r\n                            if (conversationsref.current[i]._id !== Currentchatref.current._id) {\r\n\r\n                                curusereffected.unshift(conversationsref.current[i]._id);\r\n\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                    let receivereffected = [];\r\n\r\n\r\n                    fetch(`${url}/messenger/lineup/checker/${receiverid}`, {\r\n                        credentials: 'include'\r\n                    }).then((res) => {\r\n                        return res.json();\r\n                    }).then((data) => {\r\n\r\n                        if (messagesref.current[messagesref.current.length - 1] === undefined) {\r\n                            lastidxrecf = data.lineup.length;\r\n                        }\r\n                        for (let i = 0; i <= lastidxrecf; i++) {\r\n\r\n                            if (data.lineup[i] != undefined) {\r\n\r\n                                if (data.lineup[i]._id !== Currentchatref.current._id) {\r\n\r\n                                    receivereffected.unshift(data.lineup[i]._id);\r\n\r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n\r\n                        if (!(onelineref.current.includes(receiverid))) {\r\n\r\n\r\n                            if (data.lineup[0]._id === Currentchatref.current._id) {\r\n                                isontop.current = true;\r\n                            }\r\n                            else {\r\n                                isontop.current = false;\r\n                            }\r\n\r\n                            let newobj = {};\r\n                            let newarr = data.lineup.filter((elem) => elem._id != Currentchatref.current._id);\r\n\r\n                            if (data.unread != undefined) {\r\n                                if (Object.keys(data.unread).includes(Currentchatref.current._id)) {\r\n                                    data.unread[Currentchatref.current._id] = true;\r\n                                    newobj = {\r\n                                        lineup: [Currentchatref.current, ...newarr],\r\n                                        unread: data.unread\r\n                                    }\r\n                                } else {\r\n\r\n                                    newobj = {\r\n                                        lineup: [Currentchatref.current, ...newarr],\r\n                                        unread: { ...data.unread, [Currentchatref.current._id]: true }\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                newobj = {\r\n                                    lineup: [Currentchatref.current, ...newarr],\r\n                                    unread: { [Currentchatref.current._id]: true }\r\n                                }\r\n\r\n                            }\r\n\r\n\r\n                            fetch(`${url}/messenger/lineup/${receiverid}`, {\r\n                                method: 'POST',\r\n                                headers: { 'Content-Type': \"application/json\" },\r\n                                body: JSON.stringify(newobj),\r\n                                credentials: 'include'\r\n                            }).then((res) => {\r\n                                return res.json();\r\n                            }).then((datam) => {\r\n                                async function forrec() {\r\n\r\n                                    let lastidxrec;\r\n\r\n                                    const response = await fetch(`${url}/messenger/findmytextsifany/${receiverid}`,\r\n\r\n                                        {\r\n                                            method: 'POST',\r\n                                            headers: { 'Content-Type': \"application/json\" },\r\n                                            body: JSON.stringify({ convid: Currentchatref.current._id }),\r\n                                            credentials: 'include'\r\n                                        });\r\n\r\n                                    const datum = await response.json();\r\n\r\n                                    if (datum[datum.length - 1] === undefined) {\r\n                                        lastidxrec = data.lineup.length;\r\n                                    }\r\n                                    else {\r\n                                        lastidxrec = datum[datum.length - 1].order[receiverid];\r\n                                    }\r\n\r\n\r\n                                    for (let i = 0; i <= lastidxrec; i++) {\r\n\r\n                                        if (data.lineup[i] != undefined) {\r\n\r\n                                            if (data.lineup[i]._id != Currentchatref.current._id) {\r\n\r\n                                                fetch(`${url}/messenger/incrementer/${data.lineup[i]._id}`, {\r\n                                                    method: 'POST',\r\n                                                    headers: { 'Content-Type': \"application/json\" },\r\n                                                    body: JSON.stringify({ id: receiverid, brand: newbrand, new: false, user: 'receiver', comparerval: lastidxrec }),\r\n                                                    credentials: 'include'\r\n\r\n                                                }).then((res) => {\r\n                                                    return res.json();\r\n                                                }).then((data) => {\r\n\r\n                                                }).catch((err) => {\r\n                                                    console.log(err);\r\n                                                });\r\n\r\n                                            }\r\n\r\n                                        }\r\n\r\n                                    }\r\n\r\n                                };\r\n\r\n\r\n                                if (!isontop.current) {\r\n                                    forrec();\r\n                                }\r\n\r\n                                const newmsg = {\r\n                                    conversationId: Currentchat._id,\r\n                                    sender: curuser.userid,\r\n                                    receiver: receiverid,\r\n                                    thetext: newtext,\r\n                                    status: false,\r\n                                    order: zeroobj,\r\n                                    holders: [curuser.userid, receiverid],\r\n                                    brand: { own: [newbrand] },\r\n                                    branding: [],\r\n                                    effected: curusereffected,\r\n                                    recbranding: [],\r\n                                    receffected: receivereffected\r\n\r\n                                };\r\n\r\n                                fetch(`${url}/messenger/send`, {\r\n                                    method: 'POST',\r\n                                    headers: { 'Content-Type': \"application/json\" },\r\n                                    body: JSON.stringify(newmsg),\r\n                                    credentials: 'include'\r\n                                }).then((res) => {\r\n                                    return res.json();\r\n                                }).then((datum) => {\r\n\r\n                                    socket.current.emit(\"textclient\", {\r\n                                        senderid: curuser.userid,\r\n                                        receiverid,\r\n                                        recenttext: newtext,\r\n                                        converid: Currentchat._id,\r\n                                        saveID: datum._id,\r\n                                        status: false,\r\n                                        curchat: Currentchatref.current,\r\n                                        order: zeroobj,\r\n                                        holders: [curuser.userid, receiverid],\r\n                                        brand: datum.brand.own[0],\r\n                                        branding: datum.branding,\r\n                                        effected: datum.effected,\r\n                                        recbranding: datum.recbranding,\r\n                                        receffected: datum.receffected,\r\n                                        newlatestchat: data.unread,\r\n                                        newconversationlineup: data.lineup\r\n\r\n                                    });\r\n\r\n                                    setMessages([...messages, datum]);\r\n                                    setTimearray([...timearray, true]);\r\n                                    setNewtext(\"\");\r\n                                    setChatclicked(false);\r\n\r\n                                }).catch((err) => {\r\n                                    console.log(err);\r\n                                });\r\n\r\n                            }).catch((err) => {\r\n                                console.log(err);\r\n                            })\r\n\r\n\r\n                        }\r\n\r\n\r\n                    }).catch((err) => {\r\n                        console.log(err);\r\n                    });\r\n\r\n\r\n                } else {\r\n\r\n\r\n                    let newbrand = uuidv4();\r\n\r\n                    if (!alreadytop) {\r\n\r\n                        let newobj = {\r\n                            id: curuser.userid,\r\n                            brand: newbrand,\r\n                            new: verdict.holders.includes(curuser.userid) ? false : true,\r\n                            user: 'curuser',\r\n                            comparerval: verdict.holders.includes(curuser.userid) ? lastidx : null\r\n                        };\r\n\r\n\r\n                        for (let i = 0; i <= verdict.holders.includes(curuser.userid) ? lastidx : len; i++) {\r\n\r\n                            if (i >= conversationsref.current.length) {\r\n                                break;\r\n                            }\r\n\r\n                            if (conversationsref.current[i]._id !== Currentchatref.current._id && conversationsref.current[i] != undefined) {\r\n\r\n                                fetch(`${url}/messenger/incrementer/${conversationsref.current[i]._id}`, {\r\n                                    method: 'POST',\r\n                                    headers: { 'Content-Type': \"application/json\" },\r\n                                    body: JSON.stringify(newobj),\r\n                                    credentials: 'include'\r\n\r\n                                }).then((res) => {\r\n                                    return res.json();\r\n                                }).then((data) => {\r\n                                }).catch((err) => {\r\n                                    console.log(err);\r\n                                });\r\n\r\n\r\n\r\n                            }\r\n\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                    const receiverid = Currentchat.members.find((elem) => elem !== curuser.userid);\r\n\r\n                    let zeroobj = {\r\n                        [curuser.userid]: 0,\r\n                        [receiverid]: 0\r\n                    };\r\n\r\n                    let curusereffected = [];\r\n\r\n\r\n                    if (verdict.holders.includes(curuser.userid)) {\r\n\r\n\r\n                        for (let i = 0; i <= lastidx; i++) {\r\n\r\n                            if (conversationsref.current[i]?._id !== Currentchatref.current._id && conversationsref.current[i] != undefined) {\r\n\r\n                                curusereffected.unshift(conversationsref.current[i]._id);\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n\r\n                    } else {\r\n\r\n                        let helper = conversationsref.current.map((each) => {\r\n                            if (each._id != Currentchatref.current._id) {\r\n                                return each._id;\r\n                            }\r\n                        });\r\n\r\n                        curusereffected = helper.filter((each) => {\r\n                            return each != null;\r\n                        })\r\n\r\n                    }\r\n\r\n                    let receivereffected = [];\r\n\r\n                    fetch(`${url}/messenger/lineup/checker/${receiverid}`, {\r\n                        credentials: 'include'\r\n                    }).then((res) => {\r\n                        return res.json();\r\n                    }).then((data) => {\r\n\r\n                        if (data.lineup.length == 0) {\r\n\r\n                            receivereffected = [];\r\n\r\n                            if (!(onelineref.current.includes(receiverid))) {\r\n\r\n\r\n                                let newobj = {\r\n                                    lineup: [Currentchatref.current],\r\n                                    unread: { [Currentchatref.current._id]: true, necessary: false }\r\n                                }\r\n\r\n                                fetch(`${url}/messenger/lineup/${receiverid}`, {\r\n                                    method: 'POST',\r\n                                    headers: { 'Content-Type': \"application/json\" },\r\n                                    body: JSON.stringify(newobj),\r\n                                    credentials: 'include'\r\n                                }).then((res) => {\r\n                                    return res.json();\r\n                                }).then((data) => {\r\n\r\n                                    const newmsg = {\r\n                                        conversationId: Currentchat._id,\r\n                                        sender: curuser.userid,\r\n                                        receiver: receiverid,\r\n                                        thetext: newtext,\r\n                                        status: false,\r\n                                        order: zeroobj,\r\n                                        holders: [curuser.userid, receiverid],\r\n                                        brand: { own: [newbrand] },\r\n                                        branding: [],\r\n                                        effected: curusereffected,\r\n                                        recbranding: [],\r\n                                        receffected: receivereffected\r\n\r\n                                    };\r\n\r\n                                    fetch(`${url}/messenger/send`, {\r\n                                        method: 'POST',\r\n                                        headers: { 'Content-Type': \"application/json\" },\r\n                                        body: JSON.stringify(newmsg),\r\n                                        credentials: 'include'\r\n                                    }).then((res) => {\r\n                                        return res.json();\r\n                                    }).then((datum) => {\r\n\r\n                                        socket.current.emit(\"textclient\", {\r\n                                            senderid: curuser.userid,\r\n                                            receiverid,\r\n                                            recenttext: newtext,\r\n                                            converid: Currentchat._id,\r\n                                            saveID: datum._id,\r\n                                            status: false,\r\n                                            curchat: Currentchatref.current,\r\n                                            order: zeroobj,\r\n                                            holders: [curuser.userid, receiverid],\r\n                                            brand: datum.brand.own[0],\r\n                                            branding: datum.branding,\r\n                                            effected: datum.effected,\r\n                                            recbranding: datum.recbranding,\r\n                                            receffected: datum.receffected,\r\n                                            newlatestchat: data.unread,\r\n                                            newconversationlineup: data.lineup\r\n                                        });\r\n\r\n                                        setMessages([...messages, datum]);\r\n                                        setTimearray([...timearray, true]);\r\n                                        setNewtext(\"\");\r\n                                        setChatclicked(false);\r\n\r\n                                    }).catch((err) => {\r\n                                        console.log(err);\r\n                                    });\r\n\r\n\r\n\r\n                                }).catch((err) => {\r\n                                    console.log(err);\r\n                                })\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                        else {\r\n\r\n\r\n                            if (verdict.holders.includes(receiverid)) {\r\n\r\n                                for (let i = 0; i <= lastidxrecf; i++) {\r\n\r\n                                    if (data.lineup[i]?._id !== Currentchatref.current._id) {\r\n\r\n                                        receivereffected.unshift(data.lineup[i]._id);\r\n\r\n                                    }\r\n\r\n\r\n                                }\r\n\r\n\r\n                            } else {\r\n\r\n\r\n                                let rechelper = data.lineup.map((each) => {\r\n\r\n                                    if (each._id != Currentchatref.current._id) {\r\n                                        return each._id;\r\n                                    }\r\n\r\n                                });\r\n\r\n                                receivereffected = rechelper.filter((each) => {\r\n                                    return each != null;\r\n                                })\r\n\r\n\r\n                            }\r\n\r\n\r\n                            if (!(onelineref.current.includes(receiverid))) {\r\n\r\n\r\n                                if (data.lineup[0]._id === Currentchatref.current._id) {\r\n                                    isontop.current = true;\r\n                                }\r\n                                else {\r\n                                    isontop.current = false;\r\n                                }\r\n\r\n                                let newobj = {};\r\n                                let newarr = data.lineup.filter((elem) => elem._id != Currentchatref.current._id);\r\n\r\n                                if (data.unread != undefined) {\r\n                                    if (Object.keys(data.unread).includes(Currentchatref.current._id)) {\r\n                                        data.unread[Currentchatref.current._id] = true;\r\n                                        newobj = {\r\n                                            lineup: [Currentchatref.current, ...newarr],\r\n                                            unread: data.unread\r\n                                        }\r\n                                    } else {\r\n\r\n                                        newobj = {\r\n                                            lineup: [Currentchatref.current, ...newarr],\r\n                                            unread: { ...data.unread, [Currentchatref.current._id]: true }\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                else {\r\n                                    newobj = {\r\n                                        lineup: [Currentchatref.current, ...newarr],\r\n                                        unread: { [Currentchatref.current._id]: true }\r\n                                    }\r\n\r\n                                }\r\n\r\n\r\n                                fetch(`${url}/messenger/lineup/${receiverid}`, {\r\n                                    method: 'POST',\r\n                                    headers: { 'Content-Type': \"application/json\" },\r\n                                    body: JSON.stringify(newobj),\r\n                                    credentials: 'include'\r\n                                }).then((res) => {\r\n                                    return res.json();\r\n                                }).then((datam) => {\r\n\r\n                                    if (verdict.holders.includes(receiverid)) {\r\n\r\n                                        async function forrec() {\r\n\r\n                                            let lastidxrec;\r\n\r\n                                            const response = await fetch(`${url}/messenger/findmytextsifany/${receiverid}`,\r\n\r\n                                                {\r\n                                                    method: 'POST',\r\n                                                    headers: { 'Content-Type': \"application/json\" },\r\n                                                    body: JSON.stringify({ convid: Currentchatref.current._id }),\r\n                                                    credentials: 'include'\r\n                                                });\r\n\r\n                                            const datum = await response.json();\r\n                                            lastidxrec = datum[datum.length - 1].order[receiverid];\r\n\r\n                                            for (let i = 0; i <= lastidxrec; i++) {\r\n\r\n                                                if (data.lineup[i]._id != Currentchatref.current._id) {\r\n\r\n                                                    fetch(`${url}/messenger/incrementer/${data.lineup[i]._id}`, {\r\n                                                        method: 'POST',\r\n                                                        headers: { 'Content-Type': \"application/json\" },\r\n                                                        body: JSON.stringify({ id: receiverid, brand: newbrand, new: false, user: 'receiver', comparerval: lastidxrec }),\r\n                                                        credentials: 'include'\r\n\r\n                                                    }).then((res) => {\r\n                                                        return res.json();\r\n                                                    }).then((data) => {\r\n\r\n                                                    }).catch((err) => {\r\n                                                        console.log(err);\r\n                                                    });\r\n\r\n                                                }\r\n\r\n\r\n                                            }\r\n\r\n\r\n                                        };\r\n\r\n\r\n                                        if (!isontop.current) {\r\n\r\n                                            forrec();\r\n\r\n                                        }\r\n\r\n                                    } else {\r\n\r\n                                        for (let i = 0; i <= data.lineup.length; i++) {\r\n                                            if (data.lineup[i] != undefined) {\r\n                                                if (data.lineup[i]._id != Currentchatref.current._id) {\r\n\r\n                                                    fetch(`${url}/messenger/incrementer/${data.lineup[i]._id}`, {\r\n                                                        method: 'POST',\r\n                                                        headers: { 'Content-Type': \"application/json\" },\r\n                                                        body: JSON.stringify({ id: receiverid, brand: newbrand, new: true, user: 'receiver', comparerval: null }),\r\n                                                        credentials: 'include'\r\n\r\n                                                    }).then((res) => {\r\n                                                        return res.json();\r\n                                                    }).then((data) => {\r\n\r\n                                                    }).catch((err) => {\r\n                                                        console.log(err);\r\n                                                    });\r\n\r\n\r\n                                                }\r\n\r\n\r\n                                            }\r\n\r\n                                        }\r\n\r\n                                    }\r\n\r\n                                    const newmsg = {\r\n                                        conversationId: Currentchat._id,\r\n                                        sender: curuser.userid,\r\n                                        receiver: receiverid,\r\n                                        thetext: newtext,\r\n                                        status: false,\r\n                                        order: zeroobj,\r\n                                        holders: [curuser.userid, receiverid],\r\n                                        brand: { own: [newbrand] },\r\n                                        branding: [],\r\n                                        effected: curusereffected,\r\n                                        recbranding: [],\r\n                                        receffected: receivereffected\r\n\r\n                                    };\r\n\r\n                                    fetch(`${url}/messenger/send`, {\r\n                                        method: 'POST',\r\n                                        headers: { 'Content-Type': \"application/json\" },\r\n                                        body: JSON.stringify(newmsg),\r\n                                        credentials: 'include'\r\n                                    }).then((res) => {\r\n                                        return res.json();\r\n                                    }).then((datum) => {\r\n\r\n                                        socket.current.emit(\"textclient\", {\r\n                                            senderid: curuser.userid,\r\n                                            receiverid,\r\n                                            recenttext: newtext,\r\n                                            converid: Currentchat._id,\r\n                                            saveID: datum._id,\r\n                                            status: false,\r\n                                            curchat: Currentchatref.current,\r\n                                            order: zeroobj,\r\n                                            holders: [curuser.userid, receiverid],\r\n                                            brand: datum.brand.own[0],\r\n                                            branding: datum.branding,\r\n                                            effected: datum.effected,\r\n                                            recbranding: datum.recbranding,\r\n                                            receffected: datum.receffected,\r\n                                            newlatestchat: data.unread,\r\n                                            newconversationlineup: data.lineup\r\n\r\n\r\n                                        });\r\n\r\n                                        setMessages([...messages, datum]);\r\n                                        setTimearray([...timearray, true]);\r\n                                        setNewtext(\"\");\r\n                                        setChatclicked(false);\r\n\r\n                                    }).catch((err) => {\r\n                                        console.log(err);\r\n                                    });\r\n\r\n                                }).catch((err) => {\r\n                                    console.log(err);\r\n                                })\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n\r\n                    }).catch((err) => {\r\n                        console.log(err);\r\n                    });\r\n\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        isconv();\r\n    }\r\n\r\n    let convohandler = (c) => {\r\n\r\n        if (Currentchatref.current != null && c._id != Currentchatref.current._id) {\r\n            skeletonsemaphore.current = false;\r\n        }\r\n\r\n        if (fromconv[c._id] == undefined) {\r\n            return;\r\n        }\r\n\r\n        if (!curuser.blocked.includes(fromconv[c._id].username) && !fromconv[c._id].blocked.includes(curuser.usrn)) {\r\n\r\n            setCurrentchat(c);\r\n            Currentchatref.current = c;\r\n            setChatclicked(true);\r\n            setLoader(true);\r\n            setUpdaterchatclicked(true);\r\n\r\n            setLatestchat((prev) => {\r\n                let newobj = latestchatref.current;\r\n                newobj[c._id] = false;\r\n                return { ...newobj };\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    let delcon = (conv) => {\r\n\r\n        let nevermessages = messagesref.current;\r\n\r\n        async function deleter() {\r\n\r\n            const response = await fetch(`${url}/messenger/findatleastone/${curuser.userid}`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': \"application/json\" },\r\n                body: JSON.stringify({ convid: conv }),\r\n                credentials: 'include'\r\n            })\r\n\r\n            const verdictval = await response.json();\r\n            const receiverid = Currentchatref.current.members.find((elem) => elem !== curuser.userid);\r\n\r\n            if (verdictval.ans === null) {\r\n\r\n                setCurrentchat(null);\r\n\r\n                let newobj = { convid: conv };\r\n                let newobjtwo = { convid: conv, curuser: curuser.userid };\r\n\r\n\r\n                let iterable = [\r\n                    fetch(`${url}/messenger/conv/remover/${curuser.userid}`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': \"application/json\" },\r\n                        body: JSON.stringify(newobj),\r\n                        credentials: 'include'\r\n                    }),\r\n                    fetch(`${url}/messenger/conv/remover/${receiverid}`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': \"application/json\" },\r\n                        body: JSON.stringify(newobjtwo),\r\n                        credentials: 'include'\r\n                    }),\r\n                    fetch(`${url}/messenger/convholder/remover`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': \"application/json\" },\r\n                        body: JSON.stringify({ userid: curuser.userid, convid: conv }),\r\n                        credentials: 'include'\r\n                    })\r\n                ];\r\n\r\n\r\n                Promise.all(iterable\r\n                ).then((result) => {\r\n\r\n                    fetch(`${url}/messenger/lineup/order/${curuser.userid}`, {\r\n                        credentials: 'include'\r\n                    }).then((res) => {\r\n                        return res.json();\r\n                    }).then((data) => {\r\n                        setConversations(data.convs.lineup);\r\n                        setFollowfirst(true);\r\n                        if (data.convs.unread != undefined) {\r\n                            setLatestchat(data.convs.unread);\r\n                        }\r\n                    }).catch((err) => {\r\n                        console.log(err);\r\n                    })\r\n\r\n\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                })\r\n\r\n            } else {\r\n\r\n                if (Currentchatref.current.holders.length == 2) {\r\n                    verdict.current = true;\r\n                }\r\n\r\n                const receiverid = Currentchatref.current.members.find((elem) => elem !== curuser.userid);\r\n\r\n                let redmessages = messagesref.current;\r\n\r\n                let newobj = { convid: conv };\r\n                let newobjtwo = { convid: conv, curuser: curuser.userid };\r\n\r\n\r\n                let iterable = [\r\n                    fetch(`${url}/messenger/conv/remover/${curuser.userid}`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': \"application/json\" },\r\n                        body: JSON.stringify(newobj),\r\n                        credentials: 'include'\r\n                    }),\r\n                    fetch(`${url}/messenger/conv/remover/${receiverid}`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': \"application/json\" },\r\n                        body: JSON.stringify(newobjtwo),\r\n                        credentials: 'include'\r\n                    }),\r\n                    fetch(`${url}/messenger/convholder/remover`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': \"application/json\" },\r\n                        body: JSON.stringify({ userid: curuser.userid, convid: conv }),\r\n                        credentials: 'include'\r\n                    })\r\n                ];\r\n\r\n\r\n                Promise.all(iterable\r\n                ).then((result) => {\r\n\r\n                    fetch(`${url}/messenger/lineup/order/${curuser.userid}`, {\r\n                        credentials: 'include'\r\n                    }).then((res) => {\r\n                        return res.json();\r\n                    }).then((data) => {\r\n\r\n                        setConversations(data.convs.lineup);\r\n                        setFollowfirst(true);\r\n                        if (data.convs.unread != undefined) {\r\n                            setLatestchat(data.convs.unread);\r\n                        }\r\n\r\n                        fetch(`${url}/messenger/lineup/checker/${curuser.userid}`, {\r\n                            credentials: 'include'\r\n                        }).then((res) => {\r\n                            return res.json();\r\n                        }).then((datae) => {\r\n\r\n\r\n                            for (let i = nevermessages.length - 1; i >= 0; i--) {\r\n                                if (nevermessages[i].status == false) {\r\n\r\n                                    fetch(`${url}/messenger/delete/${nevermessages[i]._id}`, {\r\n                                        method: 'DELETE',\r\n                                        credentials: 'include'\r\n                                    }).then((res) => {\r\n                                        return res.json();\r\n                                    }).then((data) => {\r\n\r\n                                    }).catch((err) => {\r\n                                        console.log(err);\r\n                                    })\r\n\r\n                                } else {\r\n                                    break;\r\n                                }\r\n\r\n                            }\r\n\r\n                            setLoader(true);\r\n                            setCurrentchat(null);\r\n\r\n                            redmessages.map((each) => {\r\n\r\n\r\n                                if (each.sender === curuser.userid) {\r\n\r\n                                    each.effected.map((lessereach) => {\r\n\r\n                                        fetch(`${url}/messenger/decrementer/${lessereach}`, {\r\n                                            method: 'POST',\r\n                                            headers: { 'Content-Type': \"application/json\" },\r\n                                            body: JSON.stringify({ id: [curuser.userid, receiverid], brand: each.brand, user: 'curuser' }),\r\n                                            credentials: 'include'\r\n                                        }).then((res) => {\r\n                                            return res.json();\r\n                                        }).then((data) => {\r\n\r\n                                        }).catch((err) => {\r\n                                            console.log(err);\r\n                                        });\r\n\r\n\r\n                                    })\r\n\r\n\r\n                                } else {\r\n\r\n\r\n                                    each.receffected.map((lessereach) => {\r\n\r\n                                        fetch(`${url}/messenger/decrementer/${lessereach}`, {\r\n                                            method: 'POST',\r\n                                            headers: { 'Content-Type': \"application/json\" },\r\n                                            body: JSON.stringify({ id: [curuser.userid, receiverid], brand: each.brand, user: 'receiver' }),\r\n                                            credentials: 'include'\r\n                                        }).then((res) => {\r\n                                            return res.json();\r\n                                        }).then((data) => {\r\n\r\n                                        }).catch((err) => {\r\n                                            console.log(err);\r\n                                        });\r\n\r\n                                    })\r\n\r\n\r\n                                }\r\n\r\n                            })\r\n\r\n\r\n                        }).catch((err) => {\r\n                            console.log(err);\r\n                        });\r\n\r\n\r\n                    }).catch((err) => {\r\n                        console.log(err);\r\n                    })\r\n\r\n                    if (verdict.current) {\r\n\r\n                        let curchat = Currentchatref.current._id;\r\n                        setTimeout(() => {\r\n\r\n                            fetch(`${url}/messenger/convdel/reorder/${receiverid}`, {\r\n                                method: 'POST',\r\n                                headers: { 'Content-Type': \"application/json\" },\r\n                                body: JSON.stringify({ converid: conv }),\r\n                                credentials: 'include'\r\n                            }).then((res) => {\r\n                                return res.json();\r\n                            }).then((data) => {\r\n\r\n                            }).catch((err) => {\r\n                                console.log(err);\r\n                            })\r\n\r\n                            socket.current.emit('clientchangetextnums', {\r\n\r\n                                receiverid,\r\n                                convid: curchat,\r\n                                nevermessages\r\n\r\n                            });\r\n\r\n                        }, 2200);\r\n\r\n                    }\r\n\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                })\r\n\r\n            }\r\n\r\n        }\r\n\r\n        deleter();\r\n\r\n    }\r\n\r\n    let quickscroll = (() => {\r\n\r\n        setTimeout(() => {\r\n            seendiv.current?.scrollIntoView({ behavior: \"smooth\" });\r\n        }, 200);\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        setTimeout(() => {\r\n            setLoader(null);\r\n        }, 3000);\r\n    }, [loader]);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setInfo(null);\r\n        }, 2500);\r\n    }, [info]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        fetch(`${url}/messenger/lineup/order/${curuser.userid}`, {\r\n            credentials: 'include'\r\n        }).then((res) => {\r\n            return res.json();\r\n        }).then((data) => {\r\n\r\n\r\n            if (data.convs != undefined) {\r\n                setConversations(data.convs.lineup);\r\n                setFollowfirst(true);\r\n                setLatestchat(data.convs.unread);\r\n                initref.current[0] = data.convs.lineup;\r\n                initref.current[1] = data.convs.unread;\r\n            }\r\n\r\n\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        })\r\n    }, [curuser.userid]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        conversationsref.current = conversations;\r\n        latestchatref.current = latestchat;\r\n\r\n        setTimeout(() => {\r\n\r\n            fetch(`${url}/messenger/lineup/checker/${curuser.userid}`, {\r\n                credentials: 'include'\r\n            }).then((res) => {\r\n                return res.json();\r\n            }).then((data) => {\r\n\r\n                if (data == null) {\r\n                    let newobj = {\r\n                        username: curuser.usrn,\r\n                        userid: curuser.userid,\r\n                        lineup: conversationsref.current,\r\n                        unread: { necessary: false }\r\n                    }\r\n                    fetch(`${url}/messenger/lineup/create`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': \"application/json\" },\r\n                        body: JSON.stringify(newobj),\r\n                        credentials: 'include'\r\n                    }).then((res) => {\r\n                        return res.json();\r\n                    }).then((data) => {\r\n\r\n                    }).catch((err) => {\r\n                        console.log(err);\r\n                    })\r\n                }\r\n                else {\r\n\r\n                    if (onetimer.current == 1) {\r\n                        onetimer.current = 0;\r\n                        conversationsref.current = initref.current[0];\r\n                        latestchatref.current = initref.current[1];\r\n                    }\r\n\r\n                    let newobj = {};\r\n                    if (data.username == \"\") {\r\n\r\n                        newobj = {\r\n                            username: curuser.usrn,\r\n                            lineup: conversationsref.current,\r\n                            unread: latestchatref.current\r\n                        }\r\n                    } else {\r\n                        newobj = {\r\n                            lineup: conversationsref.current,\r\n                            unread: latestchatref.current\r\n                        }\r\n                    }\r\n\r\n                    fetch(`${url}/messenger/lineup/${curuser.userid}`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': \"application/json\" },\r\n                        body: JSON.stringify(newobj),\r\n                        credentials: 'include'\r\n                    }).then((res) => {\r\n                        return res.json();\r\n                    }).then((data) => {\r\n\r\n                    }).catch((err) => {\r\n                        console.log(err);\r\n                    })\r\n\r\n                }\r\n\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            });\r\n\r\n        }, 1000);\r\n\r\n\r\n    }, [conversations, latestchat]);\r\n\r\n\r\n    let nav = useNavigate();\r\n\r\n    useEffect(() => {\r\n\r\n        fetch(`${url}/messenger`, {\r\n            credentials: 'include'\r\n        }).then((res) => {\r\n            return res.json();\r\n        }).then((data) => {\r\n            if (data !== 'auth failed') {\r\n            }\r\n            else {\r\n                nav('/', { replace: true });\r\n            }\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n\r\n    }, []);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        setIstext(false);\r\n        setNewtext(\"\");\r\n        Currentchatref.current = Currentchat;\r\n\r\n        if (Currentchat != null) {\r\n\r\n            fetch(`${url}/messenger/ex/${Currentchat._id}`, {\r\n                credentials: 'include'\r\n            }).then((res) => {\r\n                return res.json();\r\n            }).then((data) => {\r\n\r\n                if (Currentchat.holders.length == 1 && !Currentchat.holders.includes(curuser.userid)) {\r\n                    setTimeout(() => {\r\n                        setInfo(true);\r\n                    }, 1500);\r\n                }\r\n\r\n                let holtexts = data.filter((each) => {\r\n                    return each.holders.includes(curuser.userid);\r\n                })\r\n\r\n                let bitexts = data.filter((each) => {\r\n                    return each.holders.length == 2;\r\n                })\r\n                setMessages(holtexts);\r\n\r\n\r\n                if (bitexts.length != 0) {\r\n\r\n                    for (let i = bitexts.length - 1; i >= 0; i--) {\r\n                        if (bitexts[i]?.status == true) {\r\n                            break;\r\n                        }\r\n                        else if (bitexts[i]?.sender !== curuser.userid) {\r\n                            fetch(`${url}/messenger/seen/` + bitexts[i]?._id, {\r\n                                credentials: 'include'\r\n                            }).then((res) => {\r\n                                return res.json();\r\n                            }).then((data) => {\r\n                                setSomeonetexted(true);\r\n                            }).catch((err) => {\r\n                                console.log(err);\r\n                            });\r\n\r\n                            const receiverid = Currentchat?.members.find((elem) => elem !== curuser.userid);\r\n\r\n                            socket.current.emit(\"clientseen\", {\r\n                                receiverid,\r\n                                status: true,\r\n                                messagesREC: data,\r\n                                curchat: Currentchat\r\n                            });\r\n\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            });\r\n\r\n            let identID = null;\r\n            if (Currentchat.members[0] == curuser.userid) {\r\n                identID = Currentchat.members[1];\r\n            }\r\n            else {\r\n                identID = Currentchat.members[0];\r\n            }\r\n\r\n            fetch(`${url}/messenger/getconvostuff/${identID}`, {\r\n                credentials: 'include'\r\n            }).then((res) => {\r\n                return res.json();\r\n            }).then((data) => {\r\n\r\n                data.identid = identID;\r\n                setIdent(data);\r\n                skeletonsemaphore.current = true;\r\n\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            });\r\n\r\n        }\r\n\r\n    }, [Currentchat]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        skeletonsemaphore.current = false;\r\n\r\n    }, [onlchatclicked])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (realsent.current) {\r\n\r\n            realsent.current = false;\r\n\r\n            setTimeout(() => {\r\n                seendiv.current?.scrollIntoView({ behavior: \"smooth\" });\r\n            }, 3000);\r\n\r\n\r\n\r\n        }\r\n\r\n        setRectext(messages[messages.length - 1]?._id);\r\n        setRecsender(messages[messages.length - 1]?.sender);\r\n\r\n        messagesref.current = messages;\r\n\r\n        if (shddel) {\r\n\r\n            setShddel(false);\r\n            let arrobj = Object.keys(safeinherit.current);\r\n\r\n            if (arrobj.length != 0) {\r\n\r\n                if (arrobj.length == 1) {\r\n                    safeinheritval.current = Math.min(safeinherit.current[arrobj[0]][1], safeinheritval.current);\r\n                }\r\n                else {\r\n                    for (let i = 0; i < arrobj.length; i++) {\r\n\r\n                        if (safeinherit.current[arrobj[i]][0] == true) {\r\n                            safeinheritval.current = Math.min(safeinherit.current[arrobj[i]][1], safeinheritval.current);\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                arrobj.forEach((each) => {\r\n                    if (safeinherit.current[each][0]) {\r\n                        counterfinal.current += 1;\r\n                    }\r\n                })\r\n                safeinherit.current = {};\r\n            }\r\n\r\n            if (!textdets.last && !multiplelast) {\r\n\r\n                let child = messages[safeinheritval.current];\r\n                let newbrand;\r\n                let neweffected;\r\n                let newreceffected;\r\n\r\n                if (counterinit.current === counterfinal.current - 1) {\r\n                    safeinheritval.current = 9999999999;\r\n                    counterinit.current = 0;\r\n                    counterfinal.current = 0;\r\n                    setGroupdeletion(false);\r\n                } else {\r\n                    counterinit.current += 1;\r\n                }\r\n\r\n                if (child.sender === curuser.userid) {\r\n\r\n                    newbrand =\r\n                    {\r\n                        own: [...child.brand.own, ...textdets.msg.brand.own],\r\n\r\n                    };\r\n\r\n                    if (child.brand.entrusted && textdets.msg.brand.entrusted) {\r\n                        newbrand.entrusted = [...child.brand.entrusted, ...textdets.msg.brand.entrusted]\r\n                    } else if (child.brand.entrusted) {\r\n                        newbrand.entrusted = [...child.brand.entrusted];\r\n                    } else if (textdets.msg.brand.entrusted) {\r\n                        newbrand.entrusted = [...textdets.msg.brand.entrusted];\r\n                    }\r\n\r\n\r\n                    neweffected = [...child.effected, ...textdets.msg.effected];\r\n                    newreceffected = [...child.receffected, ...textdets.msg.receffected];\r\n\r\n                } else {\r\n\r\n                    newbrand =\r\n                    {\r\n                        own: [...child.brand.own],\r\n                        entrusted: [...textdets.msg.brand.own]\r\n\r\n                    }\r\n\r\n                    if (textdets.msg.brand.entrusted) {\r\n                        newbrand.own.push(...textdets.msg.brand.entrusted);\r\n                    }\r\n\r\n                    if (child.brand.entrusted) {\r\n                        newbrand.entrusted.push(...child.brand.entrusted);\r\n                    }\r\n\r\n                    neweffected = [...child.effected, ...textdets.msg.receffected];\r\n                    newreceffected = [...child.receffected, ...textdets.msg.effected];\r\n\r\n                }\r\n\r\n                let inheritvals = async () => {\r\n\r\n                    const response = await fetch(`${url}/messenger/inheritance`,\r\n                        {\r\n                            method: 'POST',\r\n                            headers: { 'Content-Type': \"application/json\" },\r\n                            body: JSON.stringify({ inheritorid: child._id, newbrand, neweffected, newreceffected }),\r\n                            credentials: 'include'\r\n\r\n                        })\r\n\r\n                    const data = await response.json();\r\n                    setSomeonetexted(true);\r\n\r\n                }\r\n\r\n                inheritvals();\r\n\r\n\r\n            } else {\r\n\r\n\r\n                if (counterinit.current === counterfinal.current - 1) {\r\n                    safeinheritval.current = 9999999999;\r\n                    counterinit.current = 0;\r\n                    counterfinal.current = 0;\r\n                    setGroupdeletion(false);\r\n                    setMultiplelast(false);\r\n                } else {\r\n                    counterinit.current += 1;\r\n                }\r\n\r\n                let receiverid;\r\n\r\n                if (Currentchatref.current == null) {\r\n\r\n                    receiverid = truechat.current.members.find((elem) => elem !== curuser.userid);\r\n\r\n\r\n                }\r\n                else {\r\n\r\n                    receiverid = Currentchatref.current.members.find((elem) => elem !== curuser.userid);\r\n\r\n                }\r\n\r\n\r\n\r\n                fetch(`${url}/messenger/lineup/checker/${receiverid}`, {\r\n                    credentials: 'include'\r\n                }).then((res) => {\r\n                    return res.json();\r\n                }).then((data) => {\r\n\r\n                    let newobj = {};\r\n                    let newarry = [];\r\n                    if (Currentchatref.current == null) {\r\n\r\n                        newarry = data.lineup.filter((elem) => elem._id != truechat.current._id);\r\n\r\n                    } else {\r\n                        newarry = data.lineup.filter((elem) => elem._id !== Currentchatref.current._id);\r\n                    }\r\n\r\n                    let onevaluearr = [];\r\n\r\n                    if (Currentchatref.current == null) {\r\n\r\n                        onevaluearr = data.lineup.filter((elem) => elem._id == truechat.current._id);\r\n\r\n\r\n                    } else {\r\n\r\n                        onevaluearr = data.lineup.filter((elem) => elem._id == Currentchatref.current._id);\r\n                    }\r\n\r\n                    let twicedecrement = [];\r\n\r\n                    if (messages[messages.length - 1] === undefined) {\r\n\r\n                        let otherarray = [];\r\n\r\n                        for (let i = textdets.msg.order[receiverid] + 1; i < data.lineup.length; i++) {\r\n                            if (!textdets.msg.receffected.includes(data.lineup[i])) {\r\n                                otherarray.unshift(data.lineup[i]);\r\n                            }\r\n                        }\r\n\r\n                        newarry.splice(data.lineup.length, 0, onevaluearr[0]);\r\n\r\n\r\n                        if (!textdets.status) {\r\n                            data.unread[Currentchatref.current ? Currentchatref.current._id : truechat.current._id] = false;\r\n                        }\r\n\r\n                        newobj = {\r\n                            lineup: [...newarry],\r\n                            unread: data.unread\r\n                        };\r\n\r\n                        fetch(`${url}/messenger/lineup/${receiverid}`, {\r\n                            method: 'POST',\r\n                            headers: { 'Content-Type': \"application/json\" },\r\n                            body: JSON.stringify(newobj),\r\n                            credentials: 'include'\r\n                        }).then((res) => {\r\n                            return res.json();\r\n                        }).then((data) => {\r\n\r\n                            socket.current.emit('clientdelchange', {\r\n                                receiverid,\r\n                            });\r\n\r\n\r\n                        }).catch((err) => {\r\n                            console.log(err);\r\n                        })\r\n\r\n                        otherarray.map((each) => {\r\n\r\n                            twicedecrement.unshift(\r\n                                fetch(`${url}/messenger/decrementer/deltype${each}`,\r\n                                    {\r\n                                        method: 'POST',\r\n                                        headers: { 'Content-Type': \"application/json\" },\r\n                                        body: JSON.stringify({ userid: receiverid }),\r\n                                        credentials: 'include'\r\n                                    })\r\n                            )\r\n\r\n                        })\r\n\r\n                    } else {\r\n\r\n                        let lastidx = messages[messages.length - 1].order[receiverid];\r\n                        newarry.splice(lastidx, 0, onevaluearr[0]);\r\n\r\n                        if (messages[messages.length - 1].status == true) {\r\n                            data.unread[Currentchatref.current ? Currentchatref.current._id : truechat.current._id] = false;\r\n                        }\r\n\r\n                        newobj = {\r\n                            lineup: [...newarry],\r\n                            unread: data.unread\r\n                        };\r\n\r\n                        fetch(`${url}/messenger/lineup/${receiverid}`, {\r\n                            method: 'POST',\r\n                            headers: { 'Content-Type': \"application/json\" },\r\n                            body: JSON.stringify(newobj),\r\n                            credentials: 'include'\r\n                        }).then((res) => {\r\n                            return res.json();\r\n                        }).then((data) => {\r\n\r\n                            socket.current.emit('clientdelchange', {\r\n                                receiverid,\r\n                            });\r\n\r\n\r\n                        }).catch((err) => {\r\n                            console.log(err);\r\n                        })\r\n                    }\r\n\r\n\r\n\r\n                    textdets.msg.receffected.map((each) => {\r\n\r\n                        twicedecrement.unshift(\r\n                            fetch(`${url}/messenger/decrementer/${each}`,\r\n                                {\r\n                                    method: 'POST',\r\n                                    headers: { 'Content-Type': \"application/json\" },\r\n                                    body: JSON.stringify({ id: [receiverid, curuser.userid], brand: textdets.msg.brand, user: 'receiver' }),\r\n                                    credentials: 'include'\r\n                                })\r\n                        )\r\n                    })\r\n\r\n                    Promise.all((twicedecrement\r\n                    )).then((result) => {\r\n                        setSomeonetexted(true);\r\n                    }).catch((err) => {\r\n                        console.log(err);\r\n                    })\r\n\r\n\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                });\r\n\r\n                fetch(`${url}/messenger/lineup/checker/${curuser.userid}`, {\r\n                    credentials: 'include'\r\n                }).then((res) => {\r\n                    return res.json();\r\n                }).then((data) => {\r\n\r\n                    let newobj = {};\r\n                    let newarr;\r\n\r\n                    if (Currentchatref.current == null) {\r\n\r\n                        newarr = data.lineup.filter((elem) => elem._id != truechat.current._id);\r\n\r\n                    } else {\r\n\r\n                        newarr = data.lineup.filter((elem) => elem._id != Currentchatref.current._id);\r\n\r\n                    }\r\n\r\n                    let onevaluearr = [];\r\n\r\n\r\n                    if (Currentchatref.current == null) {\r\n\r\n                        onevaluearr = data.lineup.filter((elem) => elem._id == truechat.current._id);\r\n\r\n\r\n                    } else {\r\n\r\n                        onevaluearr = data.lineup.filter((elem) => elem._id == Currentchatref.current._id);\r\n                    }\r\n\r\n\r\n                    let twicedecrement = [];\r\n\r\n                    if (messages[messages.length - 1] === undefined) {\r\n\r\n\r\n                        let otherarray = [];\r\n\r\n                        for (let i = textdets.msg.order[curuser.userid] + 1; i < data.lineup.length; i++) {\r\n\r\n                            if (!textdets.msg.effected.includes(data.lineup[i]._id)) {\r\n                                otherarray.unshift(data.lineup[i]);\r\n                            }\r\n\r\n                        }\r\n\r\n                        newarr.splice(data.lineup.length, 0, onevaluearr[0]);\r\n\r\n                        newobj = {\r\n                            lineup: [...newarr],\r\n                            unread: data.unread\r\n                        };\r\n\r\n                        fetch(`${url}/messenger/lineup/${curuser.userid}`, {\r\n                            method: 'POST',\r\n                            headers: { 'Content-Type': \"application/json\" },\r\n                            body: JSON.stringify(newobj),\r\n                            credentials: 'include'\r\n                        }).then((res) => {\r\n                            return res.json();\r\n                        }).then((data) => {\r\n\r\n                            fetch(`${url}/messenger/lineup/order/${curuser.userid}`, {\r\n                                credentials: 'include'\r\n                            }).then((res) => {\r\n                                return res.json();\r\n                            }).then((data) => {\r\n\r\n                                setConversations(data.convs.lineup);\r\n                                setFollowfirst(true);\r\n                                if (data.convs.unread != undefined) {\r\n                                    setLatestchat(data.convs.unread);\r\n                                }\r\n\r\n                            }).catch((err) => {\r\n                                console.log(err);\r\n                            })\r\n\r\n                        }).catch((err) => {\r\n                            console.log(err);\r\n                        })\r\n\r\n                        otherarray.map((each) => {\r\n\r\n                            twicedecrement.unshift(\r\n                                fetch(`${url}/messenger/decrementer/deltype${each}`,\r\n                                    {\r\n                                        method: 'POST',\r\n                                        headers: { 'Content-Type': \"application/json\" },\r\n                                        body: JSON.stringify({ userid: curuser.userid }),\r\n                                        credentials: 'include'\r\n                                    })\r\n                            )\r\n\r\n                        })\r\n\r\n                    } else {\r\n\r\n                        let lastidx = messages[messages.length - 1].order[curuser.userid];\r\n\r\n                        let onevaluearr = [];\r\n\r\n                        if (Currentchatref.current == null) {\r\n\r\n                            onevaluearr = data.lineup.filter((elem) => elem._id == truechat.current._id);\r\n\r\n\r\n                        } else {\r\n\r\n                            onevaluearr = data.lineup.filter((elem) => elem._id == Currentchatref.current._id);\r\n\r\n                        }\r\n\r\n\r\n                        newarr.splice(lastidx, 0, onevaluearr[0]);\r\n\r\n                        if (messages[messages.length - 1].status == true) {\r\n                            data.unread[Currentchatref.current ? Currentchatref.current._id : truechat.current._id] = false;\r\n                        }\r\n\r\n                        newobj = {\r\n                            lineup: newarr,\r\n                            unread: data.unread\r\n                        };\r\n\r\n\r\n                        fetch(`${url}/messenger/lineup/${curuser.userid}`, {\r\n                            method: 'POST',\r\n                            headers: { 'Content-Type': \"application/json\" },\r\n                            body: JSON.stringify(newobj),\r\n                            credentials: 'include'\r\n                        }).then((res) => {\r\n                            return res.json();\r\n                        }).then((data) => {\r\n\r\n                            fetch(`${url}/messenger/lineup/order/${curuser.userid}`, {\r\n                                credentials: 'include'\r\n                            }).then((res) => {\r\n                                return res.json();\r\n                            }).then((data) => {\r\n                                setConversations(data.convs.lineup);\r\n                                setFollowfirst(true);\r\n                                if (data.convs.unread != undefined) {\r\n                                    setLatestchat(data.convs.unread);\r\n                                }\r\n                            }).catch((err) => {\r\n                                console.log(err);\r\n                            })\r\n\r\n                        }).catch((err) => {\r\n                            console.log(err);\r\n                        })\r\n\r\n                    }\r\n\r\n                    textdets.msg.effected.map((each) => {\r\n\r\n                        twicedecrement.unshift(\r\n                            fetch(`${url}/messenger/decrementer/${each}`,\r\n                                {\r\n                                    method: 'POST',\r\n                                    headers: { 'Content-Type': \"application/json\" },\r\n                                    body: JSON.stringify({ id: [curuser.userid, receiverid], brand: textdets.msg.brand, user: 'curuser' }),\r\n                                    credentials: 'include'\r\n                                })\r\n                        )\r\n\r\n                    })\r\n\r\n                    Promise.all((twicedecrement\r\n                    )).then((result) => {\r\n                        setSomeonetexted(true);\r\n                    }).catch((err) => {\r\n                        console.log(err);\r\n                    })\r\n\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                });\r\n\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        for (let i = 0; i < messages.length; i++) {\r\n\r\n            if (!Object.keys(pfpobj).includes(messages[i]._id)) {\r\n\r\n                if (i === 0 && messages[i].receiver === curuser.userid) {\r\n                    setPfpobj((prev) => ({ ...prev, [messages[i]._id]: true }));\r\n                }\r\n\r\n                else {\r\n\r\n                    if (messages[i - 1]?.sender === curuser.userid) {\r\n                        setPfpobj((prev) => ({ ...prev, [messages[i]._id]: true }));\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }, [messages]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        socket.current.on(\"servertypes\", (data) => {\r\n\r\n            if ((yarescroll.current?.scrollHeight - yarescroll.current?.clientHeight) - (yarescroll.current?.scrollTop + 43) <= 7) {\r\n\r\n                setTimeout(() => {\r\n                    seendiv.current?.scrollIntoView({ behavior: \"smooth\" });\r\n                }, 1000);\r\n            }\r\n\r\n        });\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        if (yarescroll.current?.scrollHeight > yarescroll.current?.clientHeight) {\r\n            setIsscrollbar(true);\r\n        }\r\n\r\n\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        setGoback(true);\r\n        safeinherit.current = {};\r\n        setMultiplelast(false);\r\n        setShowfastscroll(false);\r\n\r\n        setTimeout(() => {\r\n            seendiv.current?.scrollIntoView({ behavior: \"smooth\" });\r\n\r\n        }, 3300);\r\n\r\n\r\n    }, [Currentchat]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        socket.current.emit(\"addMe\", curuser.userid);\r\n\r\n        socket.current.on(\"onlinefrens\", (data) => {\r\n\r\n            let helperarr = curuser.following;\r\n\r\n            let newarr = helperarr.filter((each) => data.some((u) => u.userid === each));\r\n            setOnlusers(helperarr.filter((each) => data.some((u) => u.userid === each)));\r\n            onelineref.current = data;\r\n            const curURL = window.location.pathname;\r\n\r\n            let typetwo = curURL.replace('/messenger/', '');\r\n            let datatwo = typetwo.replace('outsider/', '');\r\n            let realdata = datatwo.replace('insider/', '');\r\n\r\n            if (typetwo[0] == 'o') {\r\n                setOutsider({ verdict: true, data: realdata });\r\n            }\r\n\r\n        })\r\n\r\n    }, [curuser]);\r\n\r\n    useEffect(() => {\r\n\r\n        redselectorref.current = redselector;\r\n        if (Object.keys(redselectorref.current).length == messagesref.current.length) {\r\n\r\n            truechat.current = Currentchatref.current;\r\n\r\n        }\r\n\r\n    }, [redselector]);\r\n\r\n    let groupdel = () => {\r\n\r\n\r\n        if (truechat.current) {\r\n            delcon(truechat.current._id);\r\n        } else {\r\n            setGroupdeletion(true);\r\n        }\r\n        setGoback(true);\r\n\r\n    };\r\n\r\n\r\n    let unselect = () => {\r\n\r\n        setGroupdeletion(false);\r\n        safeinherit.current = {};\r\n        setGoback(true);\r\n        setMultiplelast(false);\r\n\r\n    };\r\n\r\n\r\n    const welcomeagain = () => {\r\n        nav('/welcome');\r\n        disp(leftpsets('HomeIcon'));\r\n    }\r\n\r\n    const viewprof = (username) => {\r\n\r\n        disp(currview(username));\r\n        nav(`/profile/${username}`)\r\n\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <>\r\n            <div className={theme ? \"messenger \" : \"messengernight\"}>\r\n                <div className=\"menu \">\r\n                    <div className=\"menuwrap\">\r\n                        <input placeholder=\"search conversations...\" className={theme ? \"searchmessages\" : \"searchmessagesnight\"} onChange={searcher} />\r\n                        {viewer == null ?\r\n                            conversations.map((c) => (\r\n                                <div key={c._id} onClick={() => { convohandler(c) }}>\r\n                                    <Conversation conver={c} latestchat={latestchat} setFromconv={setFromconv} fromconv={fromconv} />\r\n                                </div>\r\n                            ))\r\n                            :\r\n                            viewer.map((c) => (\r\n                                <div key={c._id} onClick={() => { convohandler(c) }}>\r\n                                    <Conversation conver={c} latestchat={latestchat} setFromconv={setFromconv} fromconv={fromconv} />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className={theme ? \"area\" : \"areanight\"}>\r\n                    <div className=\"areawrap\">\r\n\r\n\r\n                        {followfirst\r\n\r\n                            ?\r\n\r\n\r\n                            conversations.length != 0 || Currentchat != null ?\r\n\r\n                                <>\r\n                                    {Currentchat ?\r\n\r\n                                        <>\r\n                                            {loader ?\r\n                                                <>\r\n                                                    <div className=\"loadingscreen\" ></div>\r\n\r\n                                                </>\r\n\r\n                                                :\r\n                                                <>\r\n\r\n                                                    {info ?\r\n                                                        <>\r\n\r\n                                                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class={theme ? \"w-6 h-6 chatcloud\" : \"w-6 h-6 chatcloudnight\"}>\r\n                                                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.625 12a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H8.25m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H12m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.764 9.764 0 0 1-2.555-.337A5.972 5.972 0 0 1 5.41 20.97a5.969 5.969 0 0 1-.474-.065 4.48 4.48 0 0 0 .978-2.025c.09-.457-.133-.901-.467-1.226C3.93 16.178 3 14.189 3 12c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25Z\" />\r\n                                                            </svg>\r\n\r\n                                                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class={theme ? \"w-6 h-6 chatuser\" : \"w-6 h-6 chatusernight\"}>\r\n                                                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z\" />\r\n                                                            </svg>\r\n\r\n                                                            <span className={theme ? \"selectconvo\" : \"selectconvonight\"}> this chat had been deleted by you  </span>\r\n\r\n                                                        </>\r\n\r\n\r\n\r\n                                                        :\r\n                                                        <>\r\n                                                            <div className={theme ? \"identitybar\" : \"identitybarnight\"}>\r\n\r\n\r\n\r\n                                                                {\r\n\r\n                                                                    skeletonsemaphore.current\r\n\r\n                                                                        ?\r\n\r\n                                                                        <img className=\"identityimg\" alt=\" \" src={ident != null ? ident.pfp : ' '} onClick={() => { viewprof(ident.username) }} />\r\n\r\n                                                                        :\r\n\r\n                                                                        <div className=\"identityimgskeleton\">\r\n                                                                            <Shimmer></Shimmer>\r\n                                                                        </div>\r\n\r\n\r\n                                                                }\r\n\r\n                                                                {\r\n\r\n                                                                    skeletonsemaphore.current\r\n\r\n                                                                        ?\r\n\r\n                                                                        <span className={theme ? \"identityname\" : \"identitynamenight\"} onClick={() => { viewprof(ident.username) }}>{ident != null ? ident.fname : ''}</span>\r\n\r\n                                                                        :\r\n\r\n                                                                        <div className=\"identityfnameskeleton\">\r\n                                                                            <Shimmer></Shimmer>\r\n                                                                        </div>\r\n\r\n\r\n                                                                }\r\n\r\n                                                                {\r\n\r\n                                                                    skeletonsemaphore.current\r\n\r\n                                                                        ?\r\n\r\n                                                                        <span className={theme ? \"identityusrname\" : \"identityusrnamenight\"} onClick={() => { viewprof(ident.username) }}>{ident != null ? `@${ident.username}` : ''}</span>\r\n\r\n                                                                        :\r\n\r\n                                                                        <div className=\"identityusernameskeleton\">\r\n                                                                            <Shimmer></Shimmer>\r\n                                                                        </div>\r\n\r\n\r\n                                                                }\r\n\r\n\r\n                                                                {onlusers.includes(ident?.identid) && <div className=\"mark\"></div>}\r\n                                                                {nodel ?\r\n                                                                    <div className=\"upperoptions\">\r\n                                                                        <div>\r\n                                                                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"27\" height=\"27\" fill=\"currentColor\" className={theme ? \"bi bi-arrow-return-left notdelsel\" : \"bi bi-arrow-return-left notdelsel topiconnight\"} onClick={unselect} viewBox=\"0 0 16 16\">\r\n                                                                                <path fill-rule=\"evenodd\" d=\"M14.5 1.5a.5.5 0 0 1 .5.5v4.8a2.5 2.5 0 0 1-2.5 2.5H2.707l3.347 3.346a.5.5 0 0 1-.708.708l-4.2-4.2a.5.5 0 0 1 0-.708l4-4a.5.5 0 1 1 .708.708L2.707 8.3H12.5A1.5 1.5 0 0 0 14 6.8V2a.5.5 0 0 1 .5-.5z\" />\r\n                                                                            </svg>\r\n                                                                        </div>\r\n\r\n                                                                        <div>\r\n                                                                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"27\" height=\"27\" fill=\"currentColor\" className={theme ? \"bi bi-trash2-fill seldel\" : \"bi bi-trash2-fill seldel topiconnight\"} onClick={groupdel} viewBox=\"0 0 16 16\">\r\n                                                                                <path d=\"M2.037 3.225A.703.703 0 0 1 2 3c0-1.105 2.686-2 6-2s6 .895 6 2a.702.702 0 0 1-.037.225l-1.684 10.104A2 2 0 0 1 10.305 15H5.694a2 2 0 0 1-1.973-1.671L2.037 3.225zm9.89-.69C10.966 2.214 9.578 2 8 2c-1.58 0-2.968.215-3.926.534-.477.16-.795.327-.975.466.18.14.498.307.975.466C5.032 3.786 6.42 4 8 4s2.967-.215 3.926-.534c.477-.16.795-.327.975-.466-.18-.14-.498-.307-.975-.466z\" />\r\n                                                                            </svg>\r\n                                                                        </div>\r\n                                                                    </div>\r\n\r\n\r\n                                                                    :\r\n\r\n                                                                    <div>\r\n                                                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fill=\"currentColor\" className={theme ? \"bi bi-trash3 topdelete\" : \"bi bi-trash3 topdelete topiconnight\"} onClick={() => { delcon(Currentchat._id) }} viewBox=\"0 0 16 16\">\r\n                                                                            <path d=\"M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5ZM11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0H11Zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5h9.916Zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5Z\" />\r\n                                                                        </svg>\r\n                                                                    </div>\r\n\r\n                                                                }\r\n                                                            </div>\r\n\r\n                                                            <div ref={yarescroll} className=\"areawrapupper\">\r\n                                                                {messages.map((o) => (\r\n\r\n                                                                    <div key={o._id} ref={chatclicked ? instantref : scrollref} className={!pfpobj[o._id] ? 'pdleft' : ''}>\r\n                                                                        <Chatabyss onechat={o} own={o.sender === curuser.userid} ident={ident} status={o.status} id={o._id} rec={rectext} pfpobj={pfpobj} finalseen={finalseenobj} messages={messages} setMessages={setMessages} Currentchat={Currentchat} socket={socket} setShddel={setShddel} setTextdets={setTextdets} redisplaylane={redisplaylane} setRedisplaylane={setRedisplaylane} redselector={redselector} setRedselector={setRedselector} setNodel={setNodel} goback={goback} setGoback={setGoback} groupdeletion={groupdeletion} groupie={redselectorref.current[o._id]} safeinherit={safeinherit} setMultiplelast={setMultiplelast} sempahore={skeletonsemaphore.current} />\r\n                                                                    </div>\r\n\r\n                                                                ))}\r\n\r\n\r\n                                                                <div ref={dotref}>\r\n\r\n                                                                    {recsender === curuser.userid ?\r\n\r\n                                                                        <>\r\n\r\n\r\n                                                                            {realcurchat?.includes(Currentchat._id) &&\r\n\r\n                                                                                <div className=\"typerimgdiv\">\r\n\r\n                                                                                    <img className=\"typerimg\" alt=\" \" src={ident != null ? ident.pfp : ' '} />\r\n                                                                                    <div className=\"typestatus\" style={{ padding: '10px', marginTop: '4px', borderRadius: '20px', backgroundColor: 'rgb(30,36,36)', color: 'white', maxWidth: \"60px\" }}>\r\n                                                                                        <div className=\"threedots\">\r\n                                                                                            <div className=\"adot\">\r\n                                                                                                <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"8\" width=\"8\" fill=\"currentColor\" class=\"bi bi-circle-fill\" viewBox=\"0 0 16 16\">\r\n                                                                                                    <circle cx=\"8\" cy=\"8\" r=\"8\" />\r\n                                                                                                </svg>\r\n                                                                                            </div>\r\n                                                                                            <div className=\"adot\">\r\n                                                                                                <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"8\" width=\"8\" fill=\"currentColor\" class=\"bi bi-circle-fill\" viewBox=\"0 0 16 16\">\r\n                                                                                                    <circle cx=\"8\" cy=\"8\" r=\"8\" />\r\n                                                                                                </svg>\r\n                                                                                            </div>\r\n                                                                                            <div className=\"adot\">\r\n                                                                                                <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"8\" width=\"8\" fill=\"currentColor\" class=\"bi bi-circle-fill\" viewBox=\"0 0 16 16\">\r\n                                                                                                    <circle cx=\"8\" cy=\"8\" r=\"8\" />\r\n                                                                                                </svg>\r\n                                                                                            </div>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n\r\n                                                                                </div>\r\n\r\n                                                                            }\r\n\r\n\r\n                                                                        </>\r\n\r\n\r\n                                                                        :\r\n\r\n\r\n                                                                        <>\r\n\r\n                                                                            {realcurchat?.includes(Currentchat._id) && <div className=\"typestatus\" style={{ padding: '10px', marginLeft: '50px', marginTop: '11px', borderRadius: '20px', backgroundColor: 'rgb(30,36,36)', color: 'white', maxWidth: \"60px\" }}>\r\n                                                                                <div className=\"threedots\">\r\n                                                                                    <div className=\"adot\">\r\n                                                                                        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"8\" width=\"8\" fill=\"currentColor\" class=\"bi bi-circle-fill\" viewBox=\"0 0 16 16\">\r\n                                                                                            <circle cx=\"8\" cy=\"8\" r=\"8\" />\r\n                                                                                        </svg>\r\n                                                                                    </div>\r\n                                                                                    <div className=\"adot\">\r\n                                                                                        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"8\" width=\"8\" fill=\"currentColor\" class=\"bi bi-circle-fill\" viewBox=\"0 0 16 16\">\r\n                                                                                            <circle cx=\"8\" cy=\"8\" r=\"8\" />\r\n                                                                                        </svg>\r\n                                                                                    </div>\r\n                                                                                    <div className=\"adot\">\r\n                                                                                        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"8\" width=\"8\" fill=\"currentColor\" class=\"bi bi-circle-fill\" viewBox=\"0 0 16 16\">\r\n                                                                                            <circle cx=\"8\" cy=\"8\" r=\"8\" />\r\n                                                                                        </svg>\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                            </div>}\r\n\r\n                                                                        </>\r\n\r\n                                                                    }\r\n\r\n                                                                </div>\r\n\r\n                                                                <div ref={seendiv} style={{ padding: '10px' }}></div>\r\n\r\n                                                                {newmsg && isscrollbar && <div className=\"fastscrollnew\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" className=\"bi bi-chat-fill\" onClick={quickscroll} viewBox=\"0 0 16 16\">\r\n                                                                    <path d=\"M8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6-.097 1.016-.417 2.13-.771 2.966-.079.186.074.394.273.362 2.256-.37 3.597-.938 4.18-1.234A9.06 9.06 0 0 0 8 15z\" />\r\n                                                                </svg></div>}\r\n\r\n                                                                {showfastscroll && <div className=\"fastscroll\">\r\n                                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" className=\"bi bi-arrow-down-circle-fill\" onClick={quickscroll} viewBox=\"0 0 16 16\">\r\n                                                                        <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v5.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V4.5z\" />\r\n                                                                    </svg>\r\n                                                                </div>}\r\n\r\n\r\n                                                            </div>\r\n                                                            <div className=\"areawraplower\">\r\n                                                                <textarea className={theme ? \"chatfield\" : \"chatfieldnight\"} placeholder=\"send message...\" onChange={textdoer} value={newtext}></textarea>\r\n                                                                <button className={istext ? \"chatsender\" : \"chatsender blocked\"} onClick={handlesender}>send</button>\r\n                                                            </div>\r\n\r\n                                                        </>\r\n                                                    }\r\n\r\n                                                </>\r\n\r\n                                            }\r\n\r\n\r\n                                        </>\r\n\r\n                                        :\r\n\r\n\r\n                                        <>\r\n\r\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class={theme ? \"w-6 h-6 chatcloud\" : \"w-6 h-6 chatcloudnight\"}>\r\n                                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.625 12a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H8.25m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H12m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.764 9.764 0 0 1-2.555-.337A5.972 5.972 0 0 1 5.41 20.97a5.969 5.969 0 0 1-.474-.065 4.48 4.48 0 0 0 .978-2.025c.09-.457-.133-.901-.467-1.226C3.93 16.178 3 14.189 3 12c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25Z\" />\r\n                                            </svg>\r\n\r\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class={theme ? \"w-6 h-6 chatuser\" : \"w-6 h-6 chatusernight\"}>\r\n                                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z\" />\r\n                                            </svg>\r\n\r\n\r\n                                            <span className={theme ? \"selectconvo\" : \"selectconvonight\"}>select a conversation to begin chatting !</span>\r\n                                        </>\r\n\r\n\r\n\r\n\r\n                                    }\r\n\r\n\r\n\r\n                                </>\r\n\r\n                                :\r\n\r\n                                <>\r\n\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class={theme ? \"w-6 h-6 chatcloud\" : \"w-6 h-6 chatcloudnight\"}>\r\n                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.625 12a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H8.25m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H12m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.764 9.764 0 0 1-2.555-.337A5.972 5.972 0 0 1 5.41 20.97a5.969 5.969 0 0 1-.474-.065 4.48 4.48 0 0 0 .978-2.025c.09-.457-.133-.901-.467-1.226C3.93 16.178 3 14.189 3 12c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25Z\" />\r\n                                    </svg>\r\n\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class={theme ? \"w-6 h-6 chatuser\" : \"w-6 h-6 chatusernight\"}>\r\n                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z\" />\r\n                                    </svg>\r\n\r\n                                    <span className={theme ? \"selectconvohuge\" : \"selectconvohugenight\"}>follow someone to start chatting or have a look at recommendations !</span>\r\n                                </>\r\n\r\n                            :\r\n\r\n                            <>\r\n                                <div className=\"loadingscreen\" ></div>\r\n\r\n                            </>\r\n\r\n                        }\r\n\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"currentonline \">\r\n                    <div className=\"curonlinewrap\">\r\n                        <Onlinechatters onl={onlusers} setCurrentchat={setCurrentchat} Currentchat={Currentchat} setDraft={setDraft} draft={draft} outsider={outsider} setOutsider={setOutsider} semaphore={skeletonsemaphore.current} setOnlchatclicked={setOnlchatclicked} onlchatclicked={onlchatclicked} />\r\n                    </div>\r\n\r\n                </div>\r\n                <div className={theme ? \"homediv\" : \"homedivnight\"} onClick={welcomeagain}>\r\n                    <HomeIcon className={theme ? 'texthomeicon' : \"texthomeiconnight\"} />\r\n                </div>\r\n                <div className={theme ? \"lowerblack\" : \"lowerblacknight\"}></div>\r\n            </div>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default Messenger;","import ReactDom from 'react-dom';\r\nimport { Ring } from '@uiball/loaders'\r\nimport '../../corecss/loadingmodal.css';\r\n\r\nconst Loadingmodal = ({trigger}) => {\r\n\r\n\r\n    return ReactDom.createPortal(  \r\n        <>\r\n            <div className='blurremainload'></div>\r\n            <div className='loadring'><Ring size={40} lineWeight={5} speed={2} color=\"white\"/></div>\r\n        </>\r\n\r\n        , document.getElementById('portal')\r\n    );\r\n}\r\n \r\nexport default Loadingmodal;","import ReactDom from 'react-dom';\r\nimport '../../corecss/yesno.css';\r\nimport Loadingmodal from './loadingmodal';\r\nimport { useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from \"react-redux\";\r\nimport { loadersets } from '../../features/loader.js'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { clearfollowunfollow } from '../../features/followunfollow.js';\r\nimport { clearsettings } from '../../features/forsettings.js';\r\nimport { cleariconreset } from '../../features/iconreseter.js';\r\nimport { clearleftp } from '../../features/leftp.js';\r\nimport { clearloader } from '../../features/loader.js';\r\nimport { clearnextreqprof } from '../../features/nextreqprofile.js';\r\nimport { clearnextreq } from '../../features/nextrequested.js';\r\nimport { clearnotif } from '../../features/notifvisit.js';\r\nimport { clearprof } from '../../features/profile.js';\r\nimport { clearstory } from '../../features/story.js';\r\nimport { clearstorydat } from '../../features/storydata.js';\r\nimport { clearyourdets } from '../../features/you.js';\r\nimport { clearnewpost } from '../../features/newpost.js';\r\nimport { cleartheme } from '../../features/theme.js';\r\n\r\nconst Yesnomodal = ({ trigger, text, bold, extra }) => {\r\n\r\n  let [loader, setLoader] = useState(false);\r\n  let theme = useSelector((state) => { return state.themeyr.value });\r\n\r\n  let nav = useNavigate();\r\n  const disp = useDispatch();\r\n\r\n   let url = \"http://localhost:3001\";\r\n   //let url = \"https://social-media-app-backend-final.onrender.com\";\r\n\r\n  const closemodal = () => {\r\n\r\n    if (extra.purpose == \"logger\") {\r\n\r\n      extra.setCursel(null);\r\n    }\r\n\r\n    if (extra.purpose != \"newconv\") {\r\n      trigger(false);\r\n    } else {\r\n\r\n      trigger({});\r\n    }\r\n\r\n  }\r\n\r\n  const purpose = () => {\r\n\r\n\r\n    if (extra.purpose == 'newconv') {\r\n      extra.startconvhandler(extra.main);\r\n      extra.setOnlchatclicked(!extra.skeletonidentity);\r\n      trigger({});\r\n    }\r\n\r\n    if (extra.purpose == \"cancelreq\") {\r\n\r\n\r\n      fetch(`${url}/users/followcancel/${extra.viewperson}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': \"application/json\" },\r\n        body: JSON.stringify({ \"username\": extra.curuser.usrn }),\r\n        credentials: 'include'\r\n      })\r\n\r\n      extra.setAsktofollow(false);\r\n\r\n      trigger(false);\r\n\r\n      const delnotif =\r\n      {\r\n        username: extra.curuser.usrn,\r\n        type: \"followreqdel\",\r\n\r\n      };\r\n\r\n      fetch(`${url}/notif/rem/${extra.viewperson}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': \"application/json\" },\r\n        body: JSON.stringify(delnotif),\r\n        credentials: 'include'\r\n      })\r\n\r\n    }\r\n\r\n    if (extra.purpose == 'delpost') {\r\n\r\n      let newobj = {\r\n        username: extra.curuser.usrn\r\n      }\r\n\r\n      fetch(`${url}/posts/delete/${extra.thepost._id}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': \"application/json\" },\r\n        body: JSON.stringify(newobj),\r\n        credentials: 'include'\r\n      })\r\n\r\n      fetch(`${url}/notif/postdel/${extra.thepost._id}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': \"application/json\" },\r\n        body: JSON.stringify({ name: 'user' }),\r\n        credentials: 'include'\r\n      })\r\n\r\n      setLoader(true);\r\n      setTimeout(() => {\r\n        setLoader(false);\r\n        trigger(false);\r\n        extra.setDelsuccess(true);\r\n      }, 3000);\r\n\r\n    }\r\n\r\n    if (extra.purpose == 'logger') {\r\n\r\n      setLoader(true);\r\n      setTimeout(() => {\r\n        setLoader(false);\r\n        trigger(false);\r\n\r\n        fetch(`${url}/logout`, {\r\n          credentials: 'include',\r\n        })\r\n\r\n        disp(loadersets(false));\r\n        nav('/', { replace: true });\r\n\r\n      }, 3000);\r\n\r\n      setTimeout(() => {\r\n\r\n        disp(clearfollowunfollow(true));\r\n        disp(clearsettings(true));\r\n        disp(cleariconreset(true));\r\n        disp(clearleftp(true));\r\n        disp(clearloader(true));\r\n        disp(clearnextreqprof(true));\r\n        disp(clearnextreq(true));\r\n        disp(clearnotif(true));\r\n        disp(clearprof(true));\r\n        disp(clearstory(true));\r\n        disp(clearstorydat(true));\r\n        disp(clearyourdets(true));\r\n        disp(clearnewpost(true));\r\n        disp(cleartheme(true));\r\n\r\n      }, 5000)\r\n\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  return ReactDom.createPortal(\r\n    <>\r\n\r\n\r\n      <div className='blurremainy'></div>\r\n\r\n      {loader && <Loadingmodal />}\r\n\r\n      {!loader && <div className={theme ? 'yesnomodal' : \"yesnomodal yesnomodalnight\"}>\r\n\r\n        {\r\n          extra.purpose == 'newconv'\r\n\r\n            ?\r\n\r\n            <span className={theme ? 'thetextnewconv' : \"thetextnewconv nighttextyesno\"}>{text} <b>{bold}</b> ?</span>\r\n\r\n            :\r\n\r\n            extra.purpose == 'delpost'\r\n\r\n              ?\r\n\r\n              <span className={theme ? 'thetextdel' : \"thetextdel nighttextyesno \"}><b>{bold}</b> {text} ?</span>\r\n\r\n              :\r\n\r\n              extra.purpose == 'logger'\r\n\r\n                ?\r\n\r\n                <span className={theme ? 'thetextlogout' : \"thetextlogout nighttextyesno \"}>{text} <b>{bold}</b> ?</span>\r\n\r\n                :\r\n\r\n                <span className={theme ? 'thetext' : \"thetext nighttextyesno \"}>{text} <b>{bold}</b> ?</span>\r\n\r\n        }\r\n\r\n        <div className={theme ? 'nobutdiv' : 'nobutdiv nobutdivnight'} onClick={closemodal}>\r\n          <button className={theme ? 'nobut' : \"nobut nighttextyesno\"}>NO</button>\r\n        </div>\r\n\r\n        <div className={theme ? 'yesbutdiv' : \"yesbutdiv yesbutdivnight\"} onClick={purpose}>\r\n          <button className={theme ? 'yesbut' : 'yesbut nighttextyesno'}  >YES</button>\r\n        </div>\r\n      </div>}\r\n    </>\r\n\r\n    , document.getElementById('portal')\r\n  );\r\n\r\n}\r\n\r\nexport default Yesnomodal;\r\n\r\n\r\n","import \"../corecss/welcomepage.css\";\r\nimport React from 'react'\r\n\r\n\r\nconst Shimmer = ()=>{\r\n    return (\r\n        <div className='shimmer-wrap'>\r\n            <div className='shimmer'></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Shimmer;"],"names":["_ref","_fre$blocked","conver","latestchat","setFromconv","fromconv","curuser","useSelector","state","youryr","value","theme","themeyr","fre","setFre","useState","isnow","setIsnow","newunblocks","setNewunblocks","disp","useDispatch","url","useEffect","_conver$members","friendid","members","find","fren","userid","fetch","concat","credentials","then","res","json","data","c","_id","catch","err","console","log","_jsxs","className","includes","username","blocked","usrn","children","_Fragment","_jsx","alt","src","pfp","fname","Shimmer","onClick","unblock","async","method","headers","body","JSON","stringify","unblockattempt","newblocked","filter","each","newobj","email","fullname","following","yoursets","unblocked","onechat","own","ident","status","id","rec","pfpobj","finalseen","messages","setMessages","Currentchat","socket","setShddel","setTextdets","redisplaylane","setRedisplaylane","redselector","setRedselector","setNodel","goback","setGoback","groupdeletion","groupie","safeinherit","setMultiplelast","sempahore","clicked","setClicked","displaylane","setDisplaylane","noaccess","setNoaccess","bubbler","setTimeout","prev","redzone","Object","keys","del","text","length","isLast","holtexts","holders","msg","last","receiverid","elem","current","emit","convid","indexOf","copytoclipboard","copiedtext","navigator","clipboard","writeText","clearTimeout","cel","selection","redarray","i","functionc","e","target","matches","document","addEventListener","removeEventListener","thetext","xmlns","width","height","fillRule","viewBox","d","test","format","createdAt","fill","onl","setCurrentchat","setDraft","draft","outsider","setOutsider","semaphore","setOnlchatclicked","onlchatclicked","friends","setFriends","onlfriends","setOnlFriends","startconv","setStartconv","classadder","setClassadder","selref","useRef","verdict","checkifconvo","senderId","receiverId","datae","startconvhandler","o","map","checker","handleclicker","profpic","Yesnomodal","trigger","bold","extra","purpose","main","skeletonidentity","Messenger","istext","setIstext","conversations","setConversations","followfirst","setFollowfirst","newtext","setNewtext","chatclicked","setChatclicked","onlusers","setOnlusers","arrivedtext","setArrivedtext","timearray","setTimearray","setIdent","realcurchat","setRealcurchat","isscrollbar","setIsscrollbar","finalseenobj","setFinalseenobj","setPfpobj","viewer","setViewer","shddel","textdets","loader","setLoader","info","setInfo","newmsg","setNewmsg","showfastscroll","setShowfastscroll","updaterchatclicked","setUpdaterchatclicked","setLatestchat","rectext","setRectext","recsender","setRecsender","nodel","setGroupdeletion","multiplelast","someonetexted","setSomeonetexted","scrollref","instantref","dotref","timeref","yarescroll","seendiv","ysone","ystwo","finalseenobjref","Currentchatref","messagesref","realcurchatref","realsent","onelineref","firstarray","origord","isontop","latestchatref","conversationsref","redselectorref","safeinheritval","counterinit","counterfinal","truechat","onetimer","initref","skeletonsemaphore","io","on","_Currentchatref$curre","converid","saveID","temparr","onevaluearr","sender","unshift","newarr","conversationId","receiver","recenttext","Date","now","order","curchat","_messagesref$current$","_messagesref$current$2","_messagesref$current$3","messagesREC","holtexs","bitexts","convs","lineup","undefined","unread","datum","datamain","nevertexts","nevermessages","remconv","response","newunread","newlineup","receffected","lessereach","brand","user","splice","helperarray","j","one","index","findIndex","push","newholder","newestcurconv","window","location","href","substring","outsiderid","remtyper","event","dims","_yarescroll$current4","scrollup","_yarescroll$current","_yarescroll$current2","_yarescroll$current3","Math","abs","scrollHeight","clientHeight","scrollTop","_yarescroll$current5","_yarescroll$current6","_yarescroll$current7","_yarescroll$current8","_seendiv$current","scrollIntoView","behavior","convohandler","delcon","conv","verdictval","ans","newobjtwo","iterable","Promise","all","result","redmessages","effected","deleter","quickscroll","_seendiv$current2","necessary","nav","useNavigate","replace","_bitexts$i","_bitexts$i2","_bitexts$i3","identID","identid","_messages","_messages2","_seendiv$current3","arrobj","min","forEach","newarry","twicedecrement","otherarray","lastidx","newbrand","neweffected","newreceffected","child","entrusted","inheritorid","inheritvals","_messages3","_yarescroll$current13","_yarescroll$current14","_yarescroll$current15","_seendiv$current4","_yarescroll$current16","_yarescroll$current17","_seendiv$current5","helperarr","some","u","typetwo","pathname","realdata","viewprof","currview","placeholder","onChange","searchhelper","searcharr","regex","RegExp","Conversation","stroke","class","unselect","groupdel","ref","Chatabyss","style","padding","marginTop","borderRadius","backgroundColor","color","maxWidth","cx","cy","r","marginLeft","_yarescroll$current9","_yarescroll$current10","_conversationsref$cur","_yarescroll$current11","_yarescroll$current12","alreadytop","preventDefault","len","_messagesref$current","lastidxrecf","uuidv4","_conversationsref$cur2","new","comparerval","recid","correctdata","receivereffected","zeroobj","curusereffected","branding","recbranding","newdata","senderid","newlatestchat","newconversationlineup","rechelper","datam","lastidxrec","forrec","_conversationsref$cur3","helper","_data$lineup$i","isconv","Onlinechatters","welcomeagain","leftpsets","HomeIcon","ReactDom","Ring","size","lineWeight","speed","getElementById","Loadingmodal","closemodal","setCursel","viewperson","setAsktofollow","delnotif","type","thepost","name","setDelsuccess","loadersets","clearfollowunfollow","clearsettings","cleariconreset","clearleftp","clearloader","clearnextreqprof","clearnextreq","clearnotif","clearprof","clearstory","clearstorydat","clearyourdets","clearnewpost","cleartheme"],"sourceRoot":""}